<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[基础C语言第六讲]]></title>
      <url>http://www.tongxiaohao.cn/2016/05/12/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%85%AD%E8%AE%B2/</url>
      <content type="html"><![CDATA[<p><center><h1>C语言第六讲《C语言基础》</h1></center></p>
<p><center><h3>预编译 宏定义 函数 递归</h3></center><br>回顾昨天所学 </p>
<pre><code>二维数组 字符串数组 多维数组
</code></pre><h1>预编译</h1>

<pre><code>#if 1 //#if 为真 只会编译在if到else里面的内容 否则编译else到endif的内容

#else

#endif
</code></pre><h1>宏定义</h1>

<pre><code>#define kAth (12) //命名规范要不就是大写要不开头以k开通第一个字母大写
</code></pre><h1>函数</h1>

<h3>//练习1.1</h3>

<pre><code>void dayin1(int a);//函数声明
void hello(void);//函数声明
int bijiaodaxiao (int a, int b); //函数声明
int wuCanYouFanHuiZhi(void);//函数声明
int sumValue(int n);//函数声明
int dayOfYear(int year,int mouth, int day);//函数声明
int main(int argc, const char * argv[]) {
    int a = bijiaodaxiao(22, 21); //函数的调用
    printf(&quot;%d&quot;,a);
    dayin(&quot;aaaa&quot;);
    /*
     一， 函数是什么东西 土豪例子
     我很有钱我叫我的管家去买饭 叫我的下人去干活 自己只看结果
     什么是函数  具有特定函数的代码短
     从函数定义上看函数分两种 系统写好的函数 为库函数 自己写的函数 为自定义函数
     1，函数的定义 
     函数的返回值 为函数值 用return 返回 return 后边语句不在执行 没有返回值的函数也可以用
     参数有两种 形参 与 实参
     实参：出现在函数调用的表达式 比如 22 21
     形参：出现在函数定义中 用假名字代替调用时 所提供的值

     变量的作用域 就是变量的有效范围
     全局变量 与 局部变量 宏定义

     */
    printf(&quot;\n\n&quot;);
    printf(&quot;%d&quot;,dayOfYear(2000, 3, 1));
    //练习2.1
    printf(&quot;\n%d&quot;,jia(2, 3)) ;

    //函数嵌套
    //C语言中不允许嵌套定义 但是允许嵌套调用 注意不可以嵌套定义
    return 0; 
}
</code></pre><p>//函数的4种形式<br><br>//函数的定义<br><br>//返回值类型 函数名称 形式参数列表<br></p>
<pre><code>int bijiaodaxiao (int a, int b){ //有参 有返回值 (函数实现)
    return a &gt; b ? a : b;
}
void hello(void){ //无参 无返回值(函数实现)
    printf(&quot;hello&quot;);
}
void dayin1(int a){ //有参 无返回值(函数实现)
    printf(&quot;%d&quot;,a);
}
int wuCanYouFanHuiZhi(void){ //无参 有返回值(函数实现)
    return 20; //后面语句不在执行
}
</code></pre><h3>//练习1.2</h3>

<pre><code>int sumValue(int n){//(函数实现)
    int a = 0;
    for (int i = 1; i &lt;= n; i ++) {
            a = a + i;
    }
return a;
}
</code></pre><h3>//练习1.3</h3>

<pre><code>int dayOfYear(int year,int mouth, int day){//(函数实现)
// 31,28,31,30,31,30,31,31,30,31,30,31
    int a[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
    int dayofyear = 0;

    if ((year % 400 == 0) || ((year % 4 == 0) &amp;&amp; (year % 100 == 0))) {
        if (mouth &gt; 2) {
            dayofyear = 1;
        }
    }

    for (int i = 1; i &lt; mouth; i ++) {
           dayofyear = dayofyear + a[i - 1];
    }
    return dayofyear + day;
}
</code></pre><h3>数组作为参数</h3>

<pre><code>void dayin(char *s){ //写在上方不用声明
    printf(&quot;%s&quot;,s);
}
</code></pre><p></p><h1>递归 练习1.4 打断点演示一下自己就好了</h1><br>// 5! = 5 <em> 4!<br><br>// 4! = 4 </em> 3! …<br><p></p>
<pre><code>int func(int n)
{
    //    printf(&quot;正在计算%d的阶乘\n&quot;, n);

    // 0和1的阶乘都是1
    if (n == 0 || n == 1) {//（递归一定要有出口）

        return 1;
    }
    // 5! = 5 * 4!
    // 4! = 4 * 3! ...
    int result = n * func(n - 1);//(递归就是函数里面又调用了函数)

    return result;
}
</code></pre><p><center><h2>孙悟空三大白骨精！ 感谢各位学习我的博客 C语言五讲已经结束。谢谢大家! 加油！！！</h2></center></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础C语言第五讲]]></title>
      <url>http://www.tongxiaohao.cn/2016/05/12/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%94%E8%AE%B2/</url>
      <content type="html"><![CDATA[<p><center><h1>C语言第五讲《C语言基础》</h1></center></p>
<p><center><h3>二维数组 字符串数组 多维数组</h3></center><br>回顾昨天所学 </p>
<pre><code>一维数组 数组定义 相同数据类型的成员组成 一组数据 数组排序 （冒泡排序）
字符数组 与 字符串 结束多个\0 %s 打印是以\0为标志
字符串常用4个函数 strlen() 长度 不算’\0’strcpy()拷贝 strcat()拼接 strcmp()比较
</code></pre><h1>一 讲课之前</h1> 

<pre><code>大家想一想 我们数学中 有个叫点动成线 这个就是 多个单一数据 就成了数组
线动成面 就是今天的二维数组 表示数组里存数组 int a[m][n] = {0}; 这里就可以看成坐标系
m代表每一行 n代表每一列 这里看起来就是 一个表格 先讲怎么输出

//    int a[4][3] = {1,2,3,4,5}; // 元素个数 m * n //不够 补0
//    for (int i = 0; i &lt; 4; i ++) {
//        for (int k = 0; k &lt; 3; k ++) {
//            printf(&quot;%d&quot;,a[i][k]);
//        }
//        printf(&quot;\n&quot;);
//    }
//    char s[4][3] = {&apos;a&apos;,&apos;a&apos;,&apos;a&apos;,&apos;a&apos;};// char 不够补空格
//    for (int i = 0; i &lt; 4; i ++) {
//        for (int k = 0; k &lt; 3; k ++) {
//            printf(&quot;%c &quot;,s[i][k]);
//        }
//        printf(&quot;\n&quot;);
//    }
//    char c[3] = {&apos;a&apos;,&apos;a&apos;,&apos;a&apos;};
//    for (int i = 0; i &lt; 3; i ++) {
//        printf(&quot;%c &quot;,c[i]);
//    }
//    printf(&quot;\n&quot;);
</code></pre><h2>练习1.1</h2>

<pre><code>int a[2][3] = {{1,2,3},{4,5,6}};
int b[3][2] = {0};
for (int i = 0; i &lt; 2; i ++) {
    for (int k = 0; k &lt; 3; k ++) {
        b[k][i] = a[i][k];
    }
}
for (int i = 0; i &lt; 3; i++) {
    for (int k = 0; k &lt; 2; k ++) {
        printf(&quot;%d&quot;,b[i][k]);
    }
    printf(&quot;\n&quot;);
}
</code></pre> <h2>练习1.2</h2>

<pre><code> int a[3][4] = {{5,6,7,11}
                  ,{9,0,1,12}
                  ,{1,2,3,4}};
int max = 0;
int x = 0;
int y = 0;
for (int i = 0; i &lt; 3; i ++) {
    for (int k = 0; k &lt; 4; k ++) {
        if (a[i][k] &gt; max) {
            max = a[i][k];
            x = i;
            y = k;
        }
    }
}
printf(&quot;max = %d&quot;,max);
printf(&quot;在第%d行，第%d列&quot;,x,y);
</code></pre><p></p><h1>二 字符串数组</h1><br>1、字符数组：数据元素是 字符 的数组，一维数组<br><br>2、字符串数组：数据元素是 字符串 的数组，二维数组。 字符串本身也是字符数组<p></p>
<pre><code>//    char string[3][50] = {&quot;hello&quot;,&quot;童小浩&quot;,&quot;C语言&quot;};
//    for(int i = 0;i &lt; 3; i ++){
//        printf(&quot;%s&quot;,string[i]); //访问每一个字符串 string[2][2] 访问某一个字符
//    }
</code></pre><h2>练习2.1</h2>

<pre><code>//    char names[3][30] = {&quot;yujiangchuan&quot;, &quot;xuedongxiao&quot;, &quot;fandeng&quot;};
//
//    int maxLength = 0;
//
//    for (int i = 0; i &lt; 3; i++) {
//
//        int length = (int)strlen(names[i]);
//
//        if (maxLength &lt; length) {
//
//            maxLength = length;
//        }
//
//    }
//
//    printf(&quot;max length = %d&quot;, maxLength);
</code></pre><h2>练习2.2</h2>

<pre><code>// 使用冒泡排序
//    char names[3][30] = {&quot;yujiangchuan&quot;, &quot;xuedongxiao&quot;, &quot;fandeng&quot;};
//
//    for (int i = 0; i &lt; 3-1; i++) {
//
//        for (int j = 0; j &lt; 3-1-i; j++) {
//
//            // 比较两个字符串的大小
//            if (strcmp(names[j], names[j+1]) &gt; 0) {
//
//                // 交换字符串
//                char name[30] = {0};
//                strcpy(name, names[j]);
//                strcpy(names[j], names[j+1]);
//                strcpy(names[j+1], name);
//
//            }
//        }
//    }
//    
//    for (int i = 0; i &lt; 3; i++) {
//        
//        printf(&quot;%s\n&quot;, names[i]);
//    }
</code></pre><p>//从控制台输入字符串<br><br>//字符数组存储字符串<br></p>
<pre><code>//    char a[100] = {0};
// gets() 从标准输入设备读取字符串，以回车结束读取，使用&apos;\0&apos;结尾，回车符&apos;\n&apos;被舍弃没有遗留在缓冲区。
// 可以用来输入带空格的字符串。
// 可以无限读取，不会判断上限，因此使用gets不安全，可能会造成溢出

//    printf(&quot;请输入字符串：&quot;);
//    gets(a);
//    printf(&quot;%s\n&quot;, a);
// scanf(&quot;%s&quot;, a);  以 空格 或 回车符 结束读取，空格 或 回车符 会遗留在缓冲区.
// 不能直接输入带空格的字符串。

//    printf(&quot;请输入字符串：&quot;);
//    scanf(&quot;%s&quot;, a);
//    printf(&quot;%s\n&quot;, a);

// scanf(&quot;%[^\n]&quot;, a);  %[]输入字符集
// [^\n] 表示除了&apos;\n&apos;之外的字符都接收，即可以接收空格，这个可以用来输入带空格的字符串

//    printf(&quot;请输入字符串：&quot;);
//    scanf(&quot;%[^\n]&quot;, a);
//    printf(&quot;%s\n&quot;, a);
 从控制台输入字符串
 字符数串组存储多个字符串
 //    char names[6][20] = {}; // 定义一个字符串数组，里面有6个字符串，每个字符串的长度为20
//    printf(&quot;请输入6个字符串:\n&quot;);
//    for (int i = 0; i &lt; 6; i++) {
//        scanf(&quot;%s&quot;, names[i]); // 循环输入字符串
//        getchar(); // 取出键盘缓存区里的&apos;\n&apos;或&apos; &apos;字符
//    }
//
//
//    for (int i = 0; i &lt; 6; i++) {
//        
//        printf(&quot;%s &quot;, names[i]);
//    }
</code></pre><p></p><h1>三 多维数组 </h1><br>了解 a[i][j][k] <br>元素个数n = i <em> j </em> k 利用多层for循环 存取<br><br>多维数组占内存 元素个数 * 每个元素所占空间<br><p></p>
<pre><code>总结 二维数组 有两个下标 通过双层循环 存取
字符串数组 本质就是字符二维数组 字符串长度不能超过二维所规定长度-1
多维数组
</code></pre><p><center><h2>孙悟空三大白骨精！ 感谢各位学习我的博客 C语言五讲已经结束。谢谢大家! 加油！！！</h2></center></p>




]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础C语言第四讲]]></title>
      <url>http://www.tongxiaohao.cn/2016/04/15/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%9B%9B%E8%AE%B2/</url>
      <content type="html"><![CDATA[<center><h1>C语言第四讲《C语言基础》</h1></center><br><center><h3><em>数组  数组排序 字符数组</em></h3></center><br>回顾昨天所学 循环/ 循环控制语句while ，do while， for /  随机数 循环嵌套 /break 结束循环 / continue 跳出本次循环/ 通常与if连用 /随机数/<br><br><h1>数组</h1><br>1,数组定义 把相同数据类型的成员组成 一组数据<br><br>2，数组是个构造类型 最简单的数组是一堆数组<br><br>3，数组定义 int a[4] = {0}；也可以这样 int a[] = {1,2,3} 数组有下标 从0开始 a[0] 就是1；<br>数组元素不带 类型标识<br><br>4，数组通常和for循环一起用<br><br>    int a[5] = {1,2,3,4,5};<br>    //输出每一个数组中元素的值<br>    for (int i = 0; i &lt; 5; i++){<br>        printf(“%d\n”,a[i]);<br>    }<br><br>注意事项<br><br>    1、定义数组 和 数组元素<br>    2、数组作为一个整体不能直接参与运算<br><br><br><h1>数组排序 就是数组内部按一定关系排序</h1><br>1、常见的排序方法：冒泡排序、选择排序、插入排序等等<br><br>2、排序的规律有两种：升序（小~大）、降序（大~小）<br><br>3、本节课：冒泡排序。<br><br>4、冒泡排序的基本思路：每次将相邻的两个数进行比较，按照升序或降序的顺序进行交换，直到所有数字的顺序全部正确。<br><br>冒泡排序（只适合小范围的数据排序）（20遍）<br><br><br>请仔细看下面图片理解冒泡排序：<br><center><img src="http://7xqlyv.com1.z0.glb.clouddn.com/25223707-da62d63797924c5aba0579f9b46bbbab.gif" width="200" height="120" alt="图片"><br></center><br><center><a target="_blank" href="http://www.cnblogs.com/kanlei/archive/2013/11/25/3442384.html">上面图片由KANLEI博客提供感谢</a></center>

<pre><code>int sort_arr[5] = {5,4,3,2,1}; // 外层循环，控制排序趟数,趟数为 ：数组元素个数-1
//    for (int i = 0; i &lt; (5-1)/*5-1，表示数组有n个数比较，只比较n-1趟*/; i ++) {
//        // 内层for循环，控制比较次数
//        for (int j = 0; j &lt; 5 - (i+1)/*本来应该是5-i，但是i是从0 开始的，我们要得是从1开始，因此要5-（i+1）。此处的意思是每一趟，比较多少次。*/; j ++) {
//            // 判断，并且交换。
//            if (sort_arr[j] &gt; sort_arr[j+1]) {
//                利用中间变量进行交换值
//                int temp = sort_arr[j];
//                sort_arr[j] = sort_arr[j+1];
//                sort_arr[j+1] = temp;
//                
//            }
//        }
//    }
//    //打印
//    printf(&quot;冒泡排序后：&quot;);
//    for (int i = 0; i &lt; 5; i ++) {
//        printf(&quot;%d &quot;,sort_arr[i]);
//    }
</code></pre><p>练习 1 <br></p>
<pre><code>//    int array[10] = {0};
//    printf(&quot;排序前的10个数为：\n&quot;);
//    //取随机数
//    for (int i = 0; i &lt; 10 ; i ++) {
//        unsigned num = arc4random() % 21+20;
//        array[i] = num;
//        printf(&quot;%d\t&quot;,array[i]);
//    }
//    // 排序开始
//    // 外层for循环，控制比较多少趟。
//    for (int i = 0; i &lt; 10-1; i ++) {
//        // 内层for循环，控制比较多少次
//        for (int j = 0; j &lt; 10 -(i+1); j ++) {
//            // 冒泡排序
//            if (array[j] &gt; array[j+1]) {
//                
//                int temp = array[j];
//                array[j] = array[j+1];
//                array[j+1] = temp;
//            }
//        }
//    }
//    printf(&quot;\n排序后的10 个数为：\n&quot;);
//    for (int i = 0 ; i &lt; 10 ; i ++) {
//        printf(&quot;%d  &quot;,array[i]);
//    }
</code></pre><h1>字符数组</h1>

<p>1,char[] = {‘i’,’P’,’h’,’o’,’n’,’e’}<br><br>char[] = “iPhone”;<br><br> 字符串<br><br>(1)字符串常量  “hello world”<br><br>(2)使用字符数组存储字符串<br><br>(3)使用%s，输出字符串<br><br>/ 定义字符数组存储字符串<br></p>
<pre><code>// char a[] = &quot;hello world&quot;;    
// 系统如何识别字符串:&apos;\0&apos;。 数据存储在内存中，系统如何识别哪些字符属于一个完整的字符串。
// &apos;\0&apos; 是字符串结束标志，在字符串的最后一位，由系统默认添加   空操作，不可以显示字符
// &quot;hello&quot;存储时，实际上是：&apos;h&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos;\0&apos;
// 有效字符：在字符串中，&apos;\0&apos;之前的字符
// 字符数组a中存储着字符串，数组中的元素为：&apos;h&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos;\0&apos;
// 存储字符串的字符数组元素个数 = 有效字符个数 + 1
// 输出字符串
// printf(&quot;%s&quot;, a);  
</code></pre><p>2,字符串和字符数组的关系<br></p>
<pre><code>sizeof( ) 是 计算字节的运算符
// (1)字符串是一个字符数组
//    char a[] = &quot;hello&quot;;
//    char b[] = {&apos;h&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;, &apos;\0&apos;};
//    // a、b都是数组
//    // 两个数组中存储的内容都是 字符串hello
//    // 都可以访问、修改数据元素、遍历
//    a[0] = &apos;a&apos;;
//    for (int i = 0; i &lt; sizeof(a) / sizeof(char); i++) {
//        printf(&quot;a[%d] = %c  b[%d] = %c\n&quot;, i, a[i], i, b[i]);
//    }
//(2)字符数组不一定是字符
//    char a[] = {&apos;l&apos;, &apos;a&apos;, &apos;n&apos;, &apos;o&apos;, &apos;u&apos;};
//    char b[] = &quot;lanou&quot;;
// a和b都是字符数组
// 数组a中存储了5个字符；数组b中存储了6个字符，存储的是一个字符串
// 使用{}方式初始化字符数组时，如果数组元素包含’\0&apos;，存储的内容才能称为字符串
</code></pre><p>字符串常用4个函数 strlen() 长度 不算’\0’strcpy()拷贝 strcat()拼接 strcmp()比较<br><br>自己把这个常用的4个函数练习一下<br></p>
<pre><code>char hello[] = &quot;hello&quot;;
char name[] = &quot;tongxiaohao&quot;;
//计算字符串长度 strlen()
unsigned long strlong = strlen(hello);
//不算’\0’
printf(&quot;%lu\n&quot;,strlong);
printf(&quot;%lu\n&quot;,strlen(name));
/*
 5
 11
 */
//拷贝strcpy()
char strcpying[256];//开辟空间
//将后边的字符串复制到前面的字符串中
strcpy(strcpying, name);
printf(&quot;%s\n&quot;,strcpying);
/*
tongxiaohao
 */
//strcat()拼接
/*
    注意点拼接返回到第一个字符串中
    但是第一个字符串中要足够长的空间
 */
strcat(strcpying, hello);
printf(&quot;%s\n&quot;,strcpying);
/*
tongxiaohaohello
 */
/*
    strcmp()比较
 如果相同 为0; a
 如果前大于后 为负数 a1
 如果后大于前 为正数 a2
 */
char s1[] = &quot;aac&quot;;
char s2[] = &quot;abc&quot;;
char s3[] = &quot;aac&quot;;
int a = strcmp(s1,s3);
int a1 = strcmp(s2,s1);
int a2 = strcmp(s1,s2);
printf(&quot;a = %d,a1 = %d,a2 = %d\n&quot;,a,a1,a2);
/*
 a = 0,a1 = 1,a2 = -1
 */
</code></pre><p>练习 2 <br></p>
<pre><code>//    char str[] = &quot;I love iOS, i want an iPhone6&quot;;
//    
//    int n = 0;
//    int count = 0;
//    
//    while (str[n] != &apos;\0&apos;) {
//        
//        if (str[n] == &apos; &apos;) {
//            
//            count++;
//        }
//        
//        n++;
//    }
//
//    printf(&quot;空格数量：%d\n&quot;, count);
</code></pre><p>练习<br></p>
<pre><code>//只循环一半，不能交换&apos;\0&apos;
//    char str[] = &quot;afjnpue&quot;;
//    
//    int length = (int)strlen(str);
//    
//    for (int i=0; i&lt;length/2; i++) {
//        
//        //交换
//        char tmp = str[i];
//        str[i] = str[length-1-i];
//        str[length-1-i] = tmp;
//    }
//    
//    printf(&quot;%s&quot;,str);
</code></pre><p><center><h2>孙悟空三大白骨精！ 感谢各位学习我的博客 C语言四讲已经结束。谢谢大家! 加油！！！</h2></center></p>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础C语言第三讲]]></title>
      <url>http://www.tongxiaohao.cn/2016/04/14/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E8%AE%B2/</url>
      <content type="html"><![CDATA[<p><center><h1>C语言第三讲《C语言基础》</h1></center></p>
<p><center><h3>循环  循环的 控制 语句 “while，do while，for” 随机数 循环嵌套<br></h3></center><br>回顾昨天所学 BOOL  关系运算符  逻辑运算符 逻辑与 &amp;&amp; 逻辑或 || 逻辑 ！非  分支结构\if  enum\枚举\switch</p>
<h1>循环</h1>

<p>为什么要用循环 ?<br><br>先做一个程序 输出 10 个 hello word<br><br>再输出 100 个呢？<br><br>/打印 hello world 100遍，如果打印1000、10000遍呢<br><br> 可以复制粘贴，但是会造成两个问题。<br></p>
<pre><code>第一个：相同的代码太多，冗余  第二个：复制过程中，可能会出现问题，数量不对，代码可读性很差
</code></pre><p>使用循环就是为了解决这个问题<br><br>这就是要用到循环结构： 进行循环<br><br>当符合条件时候， 重复某一代码<br><br>循环的作用：减少重复冗余代码，增加代码可读性，易于维护</p>
<h1>循环的 控制 语句 while do while for</h1>

<h2>1 while：</h2><br>    while(条件表达式){   <br><br>    要先判断条件表达式 <br>在执行 代码 如果条件为假 <br>将终止循环 包括第一次 如果条件为假 将不会执行以下代码<br>        需要重复运行的代码<br><br>     }<br><br><br>     int i = 0;<br>     while (i &lt; 5) { // 0，1，2，3，4;<br>     printf(“%d\n”,i);<br>          }<br><br>练习题 #输出1～100个位数是7的数<br><br><br>    int i = 1;<br>    while (i &lt;= 100) {<br>        if (i  % 10 == 7) {<br>            printf(“%d\n”,i);<br>        }<br>        i ++;<br>    }<br><br>练习题 #输出1～100包含7的数<br><br><br>    int i = 1;<br>    while (i &lt;= 100) {<br>        if (!(i  % 10 == 7 )&amp;&amp; !(i / 10 % 10 == 7) &amp;&amp; !(i % 7 == 0)) {<br>            printf(“%d\n”,i);<br>        }<br>        i ++;<br>    }<br><br><br><h2>随机整数 break continue</h2><br>随机整数<br><br><br>     int a = 0;<br>    a = arc4random() % 10; // 0,1,2,3,4,5,6,7,8,9 个数字 对N取余 取值范围 0 ～ N - 1；<br><br>如果是 2 ～ 10 之间的呢<br><br>    int a = 0;<br>        a = arc4random() % 9+ 2;<br><br>所以有个公式 [m,n]之间的 随机数<br><br><br>    a = arc4random() % (n - m + 1)+ m;<br><br>break ：<br><br><br>    int i = 1;<br>    while (i) { // 0，1，2，3，4，5，6;<br>        if (i &gt; 6) {<br>            break; //用于结束循环<br>        }<br>        printf(“%d\n”,i);<br>        i ++;<br>    }<br><br>continue:<br><br><br>    int i = 1;<br>    while (i &lt; 5) {<br>        if (i == 2) {<br>            i ++;//注意一定要加 否则每次 都==2 程序循环到这里了<br>            continue; //跳出本次循环 下面的代码不在执行<br>        }<br>        printf(“%d\n”,i);<br>        i ++;<br>    }<br><br><h2>for</h2>

<pre><code>int i = 10;
while (i--) { //注意- -i
    printf(&quot;%d\n&quot;,i);
}
</code></pre><p>for(循环变量初始值;循环条件;循环变量增值){<br><br>    需要循环的代码<br><br>}<br></p>
<pre><code>for (int i = 10; i &gt; 0;i-- ){
    printf(&quot;%d\n&quot;,i);
}
</code></pre><p>其实 循环初始值 就是 while 变量的定义 int i ＝ 0；<br><br>循环条件呢 就是 while后边括号里的内容<br><br>增值就是 while 循环里面 i ++；大括号里依然就是需要循环的代码<br><br>利用for循做上面的两道练习题<br></p>
<p></p><h2>do….while</h2><br>while：先判断，再执行//do…while：先执行一次，在判断<p></p>
<pre><code>int i = 0;
do{
    printf(&quot;%d\n&quot;,i);
    i++;
}while(i&lt;5); 
</code></pre><p>ps:do…while保证会执行一次</p>
<p></p><h1>循环嵌套</h1><br>什么是循环嵌套 就是循环里 还有循环<br>用for 循环 写一个循环嵌套 思考一下<p></p>
<pre><code>//打印—&gt;第一步打印 —&gt; 第二步打印 —&gt;第三步

//1        123        123       1        
//12                  123       12
//123                 123       123


for (int i = 1; i &lt; 4; i ++) {
    for(int j = 1;j &lt; i + 1; j ++){
        printf(&quot;%d &quot;,j);
    }
    printf(&quot;\n&quot;);
}
</code></pre><p>练习<strong><em>*</em></strong> 乘法表</p>
<pre><code>for (int k = 1; k &lt; 10; k ++) {
    for(int i = 1;i &lt; k + 1; i ++){
        printf(&quot;%2d * %-d = %-2d&quot;,i,k,i * k);
    }
    printf(&quot;\n&quot;);
}
</code></pre><p></p><h1>总结</h1><br>for 通常用于知道循环次数<br><br>while 通常用于不知道循环次数 用break结束循环 <br><br>do while 用处很少 <br><br>break 结束循环 continue 跳出本次循环 通常与if连用<br><p></p>
<p><center><h2>孙悟空三大白骨精！ 感谢各位学习我的博客 C语言三讲已经结束。谢谢大家! 加油！！！</h2></center></p>



]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPods使用步骤已安装Ruby环境]]></title>
      <url>http://www.tongxiaohao.cn/2016/04/01/CocoaPods%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4%E5%B7%B2%E5%AE%89%E8%A3%85Ruby%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1><center>CocoaPods使用步骤已安装Ruby环境</center></h1>

<p>CocoaPods使用步骤(已有Ruby环境):</p><br><p>其实如果你安装了Xcode 就已经有了 Ruby环境</p><br><p>（注：$为提示作用，不要在终端中输入）</p><br><p>1.打开终端,输入</p>

<pre><code>$ gem sources --remove https://rubygems.org/
</code></pre><p>等有反应之后再敲入以下命令</p>

<pre><code>$ gem sources -a https://ruby.taobao.org/
</code></pre><p>为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：</p>

<pre><code>$ gem sources -l
</code></pre><p> 只有在终端中出现下面文字才表明你上面的命令是成功的：</p>

<pre><code>*** CURRENT SOURCES ***

http://ruby.taobao.org/
</code></pre><p>1.5 升级gem命令：</p>

<pre><code>$ sudo gem update --system
</code></pre><p>2.安装CocoaPods,在终端输入</p>

<pre><code>$ sudo gem install cocoapods

$ sudo gem install -n /usr/local/bin cocoapods
</code></pre><p>3.cocoaPod镜像(一般不会用到)</p><br><p>1)$ pod repo remove master</p><br><p>2)$ pod repo add master <a href="https://gitcafe.com/akuandev/Specs.git" target="_blank" rel="external">https://gitcafe.com/akuandev/Specs.git</a></p><br><p>3)$ pod repo update</p>

<p>4.假设我们要在工程中导入AFNetworking类库.</p><br><p>为了确定AFNetworking是否支持CocoaPods,可以用CocoaPods的搜索功能验证一下。在终端中输入:</p>

<pre><code>$ pod search AFNetworking
</code></pre><p>如果显示绿体字类库名,说明CocoaPods支持该类库</p>

<p>5.现在建一个工程,叫CocoaPodsDemo</p>

<p>6.CocoaPods的工作原理是利用Podfile文件来下载我们指定的类库,每个工程只需要一个Podfile文件,但Podfile文件需要我们利用终端自行创建</p>

<p>7.在终端中使用cd命令进入工程所在目录,例如:</p>

<pre><code>$ cd /Users/lanouhn/Desktop/Shared/CocoaPods
</code></pre><p>8.当前目录下,利用vim创建Podfile,在终端中输入:</p>

<pre><code>$ vim Podfile
</code></pre><p>9.按【i】或【a】进入插入模式,输入以下内容:</p>

<pre><code>platform :ios, &apos;7.0&apos;
pod &quot;AFNetworking&quot;, &quot;~&gt; 2.0&quot;
</code></pre><p>(这两行内容是在AFNetworking的github页面找到的。<br>这两句文字的意思是，当前AFNetworking支持的iOS最高版本是iOS 7.0, 要下载的AFNetworking版本是2.0)</p>

<p>输入完毕后,按【ESC】返回命令行模式</p><br><p>按【:】(冒号)进入末行模式,输入【wq】保存命令并退出vim</p>

<p>10.这时你会发现工程目录中，出现一个名为Podfile的文件，而且文件内容就是刚刚输入的内容。<br>(注意,Podfile文件应该和工程文件.xcodeproj在同一个目录下)</p>

<p>此时就可以利用CocoPods下载AFNetworking类库了,还是在终端中的当前工程目录下，运行以下命令:</p>

<pre><code>$ pod install
</code></pre><p>(个人猜测,执行该命令后,CocoPods自动会找到该目录下的Podfile文件,下载文件内容对应的第三方类库)</p><br><p>[ps.最近使用CocoaPods来添加第三方类库，无论是执行pod install还是pod update都卡在了Analyzing dependencies不动</p><br><p>原因在于当执行以上两个命令的时候会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少。加参数的命令如下：</p>

<pre><code>$ pod install --verbose --no-repo-update
$ pod update --verbose --no-repo-update]
</code></pre><p>11.执行完毕后,终端会出现以下信息:</p>

<p>EricmatoMacBook-Pro:CocoaPodsDemo ericwang$ pod install</p><br><p>Analyzing dependencies</p><br><p>Downloading dependencies</p><br><p>Installing AFNetworking (2.0.2)</p><br><p>Generating Pods project</p><br><p>Integrating client project</p>

<p>[!] From now on use <code>CocoaPodsDemo.xcworkspace</code>.</p>

<p>(注意最后一句话，意思是:以后打开工程就用 CocoaPodsDemo.xcworkspace 打开,而不是之前的.xcodeproj文件)</p>

<p>12.此时工程目录会多一个.xcworkspace文件,一个“Podfile.lock”文件和一个文件夹“Pods”</p>

<p>13.点击 .xcworkspace 打开工程,你会发现,AFNetwoking已经成功导入项目了</p><br><p>现在，你就可以开始使用AFNetworking.h了。</p><br><p>可以稍微测试一下，在你的项目任意代码文件中输入(貌似不提示):</p>

<pre><code>#import &lt;AFNetworking.h&gt;
</code></pre><p>或者</p>

<pre><code>#import &quot;AFNetworking.h&quot;
</code></pre><p>然后编译，看看是否出错</p><br><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong><br><br><p>提示我们从现在起，我们需要使用CocoaPodsTest.xcworkspace文件来开发。</p>

<p>对于工程发生的变化，有几点需要说明：</p>

<p>第三方库会被编译成库供我们真正的工程使用</p>

<p></p><p>CocoaPods会将所有的第三方库以target的方式组成一个名为Pods的工程，该工程就放在刚才新生成的Pods目录下。整个第三方库工程会生成一个名称为libPods.a的静态库提供给我们自己的CocoaPodsTest工程使用。</p><p></p>
<p></p><p>我们的工程和第三方库所在的工程会由一个新生成的workspace管理</p><p></p>
<p></p><p>为了方便我们直观的管理工程和第三方库，CocoaPodsTest工程和Pods工程会被以workspace的形式组织和管理，也就是我们刚才看到的CocoaPodsTest.xcworkspace文件。</p><p></p>
<p></p><p>原来的工程设置已经被更改了，这时候我们直接打开原来的工程文件去编译就会报错，只能使用新生成的workspace来进行项目管理。</p><p></p>
<h3><center>孙悟空三大白骨精！ 感谢各位学习我的博客！在此声明此博客并不是我所写下的，是谁写的已经忘记了。我只是引用，感谢原作者！！提供这么详细的使用步骤，谢谢大家</center></h3>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础C语言第二讲]]></title>
      <url>http://www.tongxiaohao.cn/2016/03/29/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%8C%E8%AE%B2/</url>
      <content type="html"><![CDATA[<p><center><h1>C语言第二讲《C语言基础》</h1></center></p>
<p><center><h3>BOOL  关系运算符  逻辑运算符 逻辑与 &amp;&amp; 逻辑或 || 逻辑 ！非  分支结构\if  enum\枚举\switch</h3></center><br>回顾昨天所学 N进制转换十进制 十进制转换N进制 变量的定义 运算符 赋值运算 格式化输入输出函数 输出转换格式的控制</p>
<h1>BOOL</h1>

<p>C语言中C89 是没有bool类型的(程序员自己用3个宏定义来表示 #define TRUE 1 #define FALSE 0 #define myBOOL int) 到了C99才有的 而OC是支持C99的</p><br><p>bool类型 只有两个值 真，假 在OC中BOOL就是YES ，NO C bool中非零为true真 零为false假OC中1位YES 0为NO 所以bool 值其实和int 一样都是用转义符%d进行输入输;</p>

<h1>关系运算符</h1>

<p>1，    关系运算 &lt;,&gt;,==,&lt;=,&gt;=,!= 其实在程序中==双等号表示值等 就是比较两边的值是否相等 ‘!=’ 是不相等</p><br><p>2，    关系运算的结果只有两个值 真 假 用bool来接收</p>

<h1>逻辑运算符 逻辑与 &amp;&amp; 逻辑或 || 逻辑 ！非</h1>

<p>1，逻辑与 逻辑运算符 &amp;&amp; </p><br><p>主要 关系运算表达式1 &amp;&amp; 关系运算表达式2 运算符两边 都为真的时候才位真 其他假 但是有个短路现象 <u>需要重点强调 当左边值为假的时候不会再去运算表示式2 直接会返回假 C语言中的代码优化</u>如下图</p><br><p><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%26%26%E7%9F%AD%E8%B7%AF%E7%8E%B0%E8%B1%A1.png" width="400" height="180" alt="图片"></p><br><p>2，逻辑或 ||</p><br><p>逻辑或 逻辑运算符 || 主要 关系运算表达式1 || 关系运算表达式2 运算符两边 都为假的时候才位假 其他真 但是有个短路现象 <u>需要重点强调 当左边值为真的时候不会再去运算表示式2 直接会返回真 C语言中的代码优化 例子请参照上图自己写一下</u></p><br><p>3，逻辑 ！非</p><br><p>就是取反运算 只对真假取反 ！YES ==NO</p><br><p>4，运算符的优先级</p><br><p>！&gt;算数运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符</p><p><br><br></p><h1>分支结构</h1><br><br><p>程序的主要三种结构 顺序结构 分支结构 循环结构</p><br><p>当你去跑步运动时候 一条马路跑下去就是 顺序 第一天学的就是 当遇到了一个十字路口 就是分支结构 今天要讲的就是分支结构 当你在学校跑道上跑圈的时候 就是循环结构 以后要讲</p><br><p>再次强调分支 什么是分支 比如你在巷子里吃饭 很多小餐馆 你选择一个 就是一个分支 那个巷子里就有很多的分支（餐馆）</p>

<p></p><h1>if 如果</h1><p></p>

<pre><code>1 ， //如果 表达式a &gt; b为真 才会执行 大括号里边的 代码否则不执行
int a = 10, b = 20;
if (a &gt; b) {
        printf(&quot;a &gt; b&quot;);
}
2，//如果 表达式a &gt; b为真 才会执行 大括号里边的 代码否则执行 else 所对应的大括号里的代码
if(a &gt; b){
        printf(&quot;a &gt; b&quot;);
}else{
        printf(&quot;a &lt; b&quot;);
}
return 0;
3，int a = 10, b = 20, c = 15;
if (a &gt; b &amp;&amp; a &gt; c) { //if 判断不成立 判断 第一个 else if 不成立 就下一个 else if 直到一个成立的 都不成立 才运行 else
           printf(&quot;a最大&quot;);
}else if (b &gt; a &amp;&amp; b &gt; c){
        printf(&quot;b最大&quot;);
}else if (c &gt; a &amp;&amp; c &gt; b){
        printf(&quot;c最大&quot;);
}else{
        printf(&quot;最少有两个相同的大小&quot;);
}
//如果 ?号前边 为真 就给前一个赋值 冒号前边的 为假就是冒号后边的
int c = a &gt; b ? a : b;  介绍一个比较的简单写法 也是个条件运算符
</code></pre><p></p><h1>enum 枚举 与 switch</h1><p></p>

<pre><code>enum{
        one = 1, //如果第一个不赋值 就默认为0
        tow,     //2 以下依次加1
        three,
        four,
        five
};
//目的：提高代码可读性 讲人能看懂的标识符与计算机能识别的数字建立关系
//enum写在main函数上面 如下图
</code></pre><p><img src="http://7xqlyv.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%8C%E8%8A%82%E5%9B%BE%E7%89%87.png" width="240" height="120" alt="图片">    </p><br><p></p><h3>switch case</h3><p></p>

<pre><code>int a = 0;
scanf(&quot;%d&quot;,&amp;a);
/*开关*/switch (a) { //只能放整形 只能整形 变量
/*
如果a 为2 则会运行 case tow 下面的{}里的程序
如果a 为3 则会运行 case three 下面的{}里的程序
如果a 不是1，2，3 则会运行 default 下面的{}里的程序
*/
/*情况*/ case one:{ 
        printf(&quot;a = 1&quot;);
/*情况结束标识*/break;
    }
    case tow:{
        printf(&quot;a = 2&quot;);
//break很重要不能忽视否则代码会一直向下运行 case three 直到有break
        break;
    }
    case three:{
        printf(&quot;a = 3&quot;);
        break;
    }
    default: {//可以去掉
        printf(&quot;a不是1，2，3&quot;);
        break;
    }
}
</code></pre><p><center><h2>孙悟空三大白骨精！ 感谢各位学习我的博客 C语言二讲已经结束。谢谢大家!</h2></center></p>

]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基础C语言第一讲]]></title>
      <url>http://www.tongxiaohao.cn/2016/03/25/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%80%E8%AE%B2/</url>
      <content type="html"><![CDATA[<h1><center>C语言第一讲《C语言基础》</center></h1>

<h3><center>进制  程序的一般形式  常量\变量\运算符  表达式  语句  基本输入\输出函数</center></h3>

<p></p><h1>进制</h1><p></p>
<h2>1, 进制概念 进位机制 逢多少进1</h2><br>十进制 用0～9表示 就是逢10进1 进1就是表示多了一位 “10”<br><br>生活中的例子 六十进制 钟表 逢60进1 12进制 年 逢12进1 24进制 天 每一天24小时逢24进1<br><center><img src="http://7xqlyv.com1.z0.glb.clouddn.com/bbb%20%E4%B8%8B%E5%8D%882.33.40.jpeg" width="100" height="100" alt="图片"><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E5%8D%81%E8%BF%9B%E5%88%B6%20%E4%B8%8B%E5%8D%882.33.40.jpg" width="130" height="100" alt="图片"></center><br><br><h2>2,计算机的进制</h2><br>计算机使用的是二进制 逢2进1 所以位数只有0，1 例子 0，1，10，11，100<br><br>因为目前的计算机电脑内部 只识别 是对的 还是 错的 所以 它表示的 就是1和0<br><br><h2>3,进制规则</h2><br>N进制 在表示所有位中 显示的 只有 0～N-1 遇到N前一位加1<br><br>N进制 就是逢N进1<br><br><h2>4,进制转换</h2><br>基数 是几进制 基数就是几<br><br>位  从右到左 就是从低位到高位 位是按照0开始数 最右边就是0；<br><br>权  和基数一样 是几进制 权就是几<br><br>位权  就是每一个位置 对应的单位值 N^(I - 1)<br><br>（1）十进制转N进制<br>    连除倒取余<br><center><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%20%E4%B8%8B%E5%8D%882.33.40.jpg" width="250" height="300" alt="图片"></center><br><center>例子1：转二进制   例子2：转十六进制</center><br>（2） N进制转十进制<br>    按位求和<br><center><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B61%20%E4%B8%8B%E5%8D%882.33.40.jpg" width="250" height="100" alt="图片"><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B62%20%E4%B8%8B%E5%8D%882.33.40.jpg" width="250" height="100" alt="图片"></center><br><center>例子：二进制转十进制</center><br><br><h2>5,进制数表示</h2><br>十进制：不加以修饰 100<br><br>八进制：在数值前加0  表示 0573<br><br>二进制：在数值前加0b 表示 0b1101<br><br>十六进制：在数值前加0X 表示0X2A<br><br><h2>6,进制了解</h2><br>十进制：就是开发人员使用 （人）<br><br>二进制：计算机识别的语言 0，1编码<br><br>十六进制：因为一个十六进制数可以表示4位二进制 所以十六进制更多是为了方便表示二进制 十六进制的0～F 二进制的0000～1111<br><br>    以上图片资源均来自百度。<br><br><h1>程序的一般形式</h1><br><h2>1,创建程序</h2><br>1),选择OS X 下面的Application 选择Command Line Tool （控制台模式）点下面的Next<br><center>如下图</center><br><img src="http://7xqlyv.com1.z0.glb.clouddn.com/chuangjianchengxu1%20%E4%B8%8B%E5%8D%882.33.40.png" width="682" height="392" alt="图片"><br>2),填写项目名称 和 开发组织机构名称 组织机构ID 选择语言 Objective -C (OC)点击Next 选择在桌面创建<br><center>如下图</center><br><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E5%88%9B%E5%BB%BA%E7%A8%8B%E5%BA%8F2%20%E4%B8%8B%E5%8D%882.33.40.png" width="682" height="392" alt="图片"><br><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9%E6%A1%8C%E9%9D%A2.png" width="682" height="392" alt="图片"><br><br><h2>2,程序基本介绍</h2><br><h3>1).注释</h3><br><br>单行注释，多行注视<br><br>作用：提供思路，提示代码作用，程序并不执行 不注释你会忘记的会发现以前写的代码不知道是干什么的了<br>单行注视不可以换行 只是注释 //  后边到这一行的末尾 敲到回车时候就不是注释了<br>多行注释：/<em> 可以在这个之间 可以换行</em>/<br><center><br><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A.png" width="682" height="392" alt="图片"><br></center><br><br><h3>2).main 程序执行入口 又称主函数</h3><br>    如上图 这里我们介绍一个输出语句 printf(“你好！”); 这个就是在控制台输出<br><br><h3>3).#import 与#include</h3><br><br>//#import 与#include 引入文件与类库 如果要在本文件中使用其他文件 就必须引入其他文件 格式两种 &lt;&gt; , “” .&lt;&gt;使用系统类库文件 “” 使用创建文件<br><br><h2>3,数据类型</h2><br><h3>1).数据类型的分类</h3><br>    1).基本数据类型 ：字符类型char 1字节 整型 int 4字节 短整型 short 2字节 长整型 long 4    字节 或8字节 单精度浮点型 float 4字节 双精度浮点型 double 8字节<br>    2).构造类型 ：数组 枚举<br>    3).    指针类型；<br>    4).空类型 void<br><h3>2).数据类型的单位</h3><br>    数据类型的单位 字节byte比特 最常用的是位 bits 位是最小的存储单位 1字节 == 8位（二进制位）== 2位十六进制位<br><h3>数据类型的存储</h3><br>    不同的数据类型，存储的空间不同 空间决定了数据类型的存储数据的范围<br>    1).数据类型的存储空间与操作系统有关并不是统一的 但是有个原则: short&lt;=int&lt;=long&lt;=longlong<br>    2).sizeof()运算符，计算一个数据类型占用的空间 一定要记得是运算符而不是函数<br>    3).存储空间决定了存储数据的范围,不用背只需记得最长用到的 益处：超出了数据类型的取值范围<br>    常用的数据类型字节数请看分类里的介绍<br>    4).在整型中还有一个叫无符号标识符 unsigned 而整型区 分为来种有符合与无符号有符号的区分正负 整数对应的二进制数 最高位为1 为正整数 最高位为0 为负整数<br><h1>常量\变量\运算符</h1><br>    1，常量 程序运行期间不允许改变的量 如10 ，2.5，A，转义字符不可直接打印\n 字符串常量 “你好”<br>    2，知道常量了 那变量的定义就是…… 程序运行可以改变的量变量代表存储区域 用于储存内容 在存储区域的内容就是变量的值<br>    3，变量的定义 由三部分组成<br>    变量类型修饰符 变量名称 ＝ 初始值；<br>    int studentAge = 22;<br>    4，变量命名要求<br>    只能用字母 数字 下划线 组成 并且数字不能开头<br>    不能使用系统保留字 如int float<br>    不能使用重复的变量名<br>    见面知意 这也是代码规范之一 使用驼峰命名发 单词的第一个字母大写 第一个单词 小写 如 studentName; teacherName;<br>    5，知道了变量  我们也会变量了  接下来就是运算符 第一个赋值运算符‘＝’<br>    赋值运算会把赋值运算符右边的值赋值给左边变量 age ＝ 10；<br>    赋值运算优先级低<br>    //练习<br>    //    int a = 10,b = 20;<br>    //    a = b + a;<br>    //    b = a - b;<br>    //    a = a – b;<br>    6，算数运算符 +，-，<em>，/，%，++，–，<br>    这里一定要注意 ++，– 在前在后的区别 在前先执行 在后后执行<br>    意思：如<br>    int a = 10;<br>    printf(“%d\n”,a++); //输出 10；<br>    int a = 10;<br>    printf(“%d\n”,++a); //输出 11；<br>    7,复合运算符<br>    += ,-=,</em>=,/=，%= 这些都是谁在前 计算的结果 赋值给谁<br>    如 int b = 0;<br>    b += 2; 想等于 b = b + 2; 所以赋值给b b ＝ 2;<br><h1>表达式</h1><br>    就是常量变量 与运算符组合 表达式都会有返回值 3+5 a+=b<br><h1>语句</h1><br>    程序执行的最小单位 C与OC中 都是以;结尾 如果表达式加上分号就是 一条语句<br><h1>基本输入 输出函数</h1><br>    int i = 0;<br>    scanf(“%d”,&amp;i); //格式化输入函数 %d转换符<br>    printf(“%d”,i); //格式化输出函数 %d转化符<br>    记得掩饰输入输出格式不同会产生什么问题<br>    语法scanf(格式串,变量1地址,变量2地址，……);<br>    如果输入数据类型与格式符匹配则继续读入<br>    否则不在读入立刻反回<br>    scanf(“%d\n”,&amp;i); //切记不可加\n 会抵消人工回车而且不是一次是一直抵消 并且 输入只认大回车 小键盘的回车可能不会结束读入<br>    语法 printf(格式串,表达式1,表达式2，……);<br>    空白符 scanf(“%d “,a) 空白注意将不会输出<br>    输出转换 格式控制<br>    printf(“%05.2f\n”,2.2222); //总共5位 小数点也是一位 不够补0位 不写0 表示不够补空行位<br>    printf(“%-4d\n”,20); //左对其<br>    printf(“%4d\n”,20); //右对其<br>    思考怎么输出%  解决%%<br><br><br><center><br><br>    <h2>孙悟空三大白骨精！ 感谢各位学习我的博客 C语言一讲已经结束。谢谢大家!</h2>

<p></p></center><p></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hello]]></title>
      <url>http://www.tongxiaohao.cn/2016/01/30/hello/</url>
      <content type="html"><![CDATA[<h1>Hello<br>#你们好：<br><br>这里是我自己查看的写文章对应语法的博客，没有什么实质上的东西测试使用的谢谢大家<br><br><h1><br>    这是标题<br></h1>

<p><u><br>    下划线<br></u><br><i><br>    斜字体<br></i></p>
<p><tt><br>    打火机风格的字体<br></tt></p>
<p></p><p><br>    <cite><br>        引用通常是斜字体<br>    </cite><br>    </p><p><br>        <font size="5" color="44cef6"><br>            设置字体大小颜色<br>        </font><br>    </p><br>    <center><br>            水平居中<br>    </center><br><p></p><p></p>
<blockquote><br>        从两边缩进文本创建一个段落dasdsad<br></blockquote>


<pre><code>读书这里面才是可以使用   空格的 
天天快乐
</code></pre></h1>]]></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://www.tongxiaohao.cn/404.html</url>
      <content type="html"><![CDATA[
<!DOCTYPE HTML>
<html>
<head>
	<title>404 - arao'blog</title>
	<meta name="description" content="404错误，页面不存在！">
	<meta http-equiv="content-type" content="text/html;charset=utf-8;">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
	<meta name="robots" content="all">
	<meta name="robots" content="index,follow">
</head>
<body>
	<script type="text/javascript" src="http://qzonestyle.gtimg.cn/qzone_v6/lostchild/search_children.js" charset="utf-8"></script>
</body>
</html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://www.tongxiaohao.cn/about/index.html</url>
      <content type="html"><![CDATA[<p>大家好，我是童浩。欢迎来到我的个人技术博客。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://www.tongxiaohao.cn/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://www.tongxiaohao.cn/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[分类]]></title>
      <url>http://www.tongxiaohao.cn/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
