<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>童小浩</title>
  <subtitle>tongxiaohao</subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.tongxiaohao.cn" rel="hub"/>
  <link href="http://www.tongxiaohao.cn/"/>
  <updated>2016-09-23T07:38:20.000Z</updated>
  <id>http://www.tongxiaohao.cn/</id>
  
  <author>
    <name>童小浩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基础C语言第八讲</title>
    <link href="http://www.tongxiaohao.cn/2016/09/23/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%85%AB%E8%AE%B2/"/>
    <id>http://www.tongxiaohao.cn/2016/09/23/基础C语言第八讲/</id>
    <published>2016-09-23T07:00:05.000Z</published>
    <updated>2016-09-23T07:38:20.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第八讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;数据的存储 内存的访问方式 指针变量 取址运算符&amp;amp; 取值运算符* 指针的运算符&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;本讲第二模块&lt;br&gt;&lt;br&gt;        指针与数组 指针与字符串 指针与函数&lt;br&gt;&lt;br&gt;&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;结构体 结构体声明 定义 使用
//typedef 起别名 结构体嵌套 结构体数组 结构体内存大小
typedef struct students students;
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;一·数据的存储&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;字节 是最小的存储单位 一个字节 未一个存储单位（内存单元） 不同数据类型 存储的单位不同
内存是由多个连续的内存单元组成.
内存单元用于存储数据，每个内存单元占1个字节，1个字节 = 8个二进制位
内存单元地址：内存单元的编号，连续的。便于访问内存单元，就像门牌号一样。
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;二·内存的访问方式&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;直接访问 与 间接访问
直接访问 是访问内存空间的内容 如 a = 20,b = 2 * a
间接访问 是通过内存单元编号 以及 数据所占 字节数 访问数据的数据
指针就是间接方式访问的一种
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;三·指针变量&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;int * p = NULL; //初始值NULL恒等于 0
//int * 为整数指针 注意指针变量所占字节数 只与操作系统有关
//打印指针变量的值
printf(&amp;quot;p = %p \n&amp;quot;,p);
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;四·取址运算符 &amp;amp;&lt;/h1&gt;&lt;br&gt;    int a = 10;&lt;br&gt;    int b = 20;&lt;br&gt;    int &lt;em&gt;pa = &amp;a;//取出整形数a的地址&lt;br&gt;    int &lt;/em&gt;pb = &amp;b;//取出整形数b的地址&lt;br&gt;    printf(“pa = %p,a = %d &amp;amp;a = %p\n”,pa,a,&amp;amp;a);&lt;br&gt;    printf(“pb = %p,b = %d &amp;amp;b = %p\n”,pb,b,&amp;amp;b);&lt;br&gt;&lt;br&gt;&lt;h1&gt;五·取值运算符 &lt;em&gt;&lt;/em&gt;&lt;/h1&gt;&lt;br&gt;    printf(“pa = %d\n”,&lt;em&gt;pa);//打印出地址pa内的值&lt;br&gt;    /&lt;/em&gt;&lt;br&gt;        注意 指针变量定义 &lt;em&gt; 只起到修饰作用告诉 p是什么&lt;br&gt;            指针变量取值时 访问内存地址为P的存储区域内容
     &lt;/em&gt;/&lt;br&gt;&lt;br&gt;&lt;h1&gt;六·指针的运算符&lt;/h1&gt;&lt;br&gt;    //指针的运算只有加减&lt;br&gt;    //指针的赋值 意味着 指针的重只向&lt;br&gt;    pa = &amp;b;//pa指针重指向b的地址&lt;br&gt;    printf(“Pa = %p\n”,pa);//此时输出为b的地址&lt;br&gt;&lt;br&gt;&lt;center&gt;&lt;h1&gt;本讲第二模块&lt;br&gt;&lt;br&gt;        指针与数组 指针与字符串 指针与函数&lt;br&gt;&lt;br&gt;&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;&lt;h1&gt;指针与数组&lt;/h1&gt;&lt;br&gt;    //数组:连续内存空间存储数据的构造类型&lt;br&gt;    //数组名：即为数组首地址&lt;br&gt;    /&lt;em&gt;&lt;br&gt;    解释 &lt;/em&gt;p &lt;em&gt;(p + 1) &lt;/em&gt;p + 1&lt;br&gt;    &lt;em&gt;(p + 2) = 6 元素值是否会发生改变&lt;br&gt;     指针可以当数组使用&lt;br&gt;     指针与数组的区别&lt;br&gt;     1， 所占空间不同&lt;br&gt;     指针只与系统操作位数有关&lt;br&gt;     数组与元素个数 和类型有关&lt;br&gt;     2，数组名是常量地址 不能重只向 指针可以
     &lt;/em&gt;/&lt;br&gt;&lt;br&gt;&lt;h1&gt;指针与字符串&lt;/h1&gt;&lt;br&gt;    // 定义字符数组存储字符串  str在栈区存放，常量字符串拷贝的副本存储在字符数组中，数组中的元素是可以改的。&lt;br&gt;    char str[] = “hello”;&lt;br&gt;    char &lt;em&gt;p = str;&lt;br&gt;    // 使用指针修改数组元素
    &lt;/em&gt;p = ‘a’;&lt;br&gt;    // 使用指针访问数组元素&lt;br&gt;    for (int i = 0; i &amp;lt; 6; i++) {&lt;br&gt;        printf(“%c “, &lt;em&gt;(p + i));&lt;br&gt;    }&lt;br&gt;    printf(“\n”);&lt;br&gt;    // 使用指针操作字符串&lt;br&gt;    printf(“%s\n”, p);&lt;br&gt;    // 定义字符指针指向字符串&lt;br&gt;    // “”常量字符串，存储在常量区，只能访问不能修改&lt;br&gt;    // 定义指针指向常量区的字符串常量的首地址，指针p中只是存储的地址&lt;br&gt;    char &lt;/em&gt; p = “hello”;&lt;br&gt;      &lt;em&gt;p = ‘a’;&lt;br&gt;    // 可以访问字符和字符串&lt;br&gt;    printf(“%s\n”, p);&lt;br&gt;    printf(“%c\n”, &lt;/em&gt;p);&lt;br&gt;    // 总结：指向数组的指针可以访问和修改数组元素；指向常量字符串的指针只能访问数组元素&lt;br&gt;      char a[] = “hello”;&lt;br&gt;      char b[20] = {0};&lt;br&gt;      char &lt;em&gt; c = NULL;&lt;br&gt;      c = “lanou”; // 指向新的字符串&lt;br&gt;      strcpy(b, a);&lt;br&gt;      strcpy(c, a);    // 不能修改指针c指向的内容&lt;br&gt;      //练习：&lt;br&gt;      //通过指针计算字符串的长度&lt;br&gt;      char str[] = “iPhone”;&lt;br&gt;      char &lt;/em&gt;ps = str;&lt;br&gt;      int n = 0;&lt;br&gt;      //    while (ps[n] != ‘\0’) {&lt;br&gt;        //或者&lt;br&gt;      //while (&lt;em&gt;(ps + n) != ‘\0’) {&lt;br&gt;          n ++;&lt;br&gt;      }&lt;br&gt;      printf(“%d\n”,n);//6&lt;br&gt;      char strs[3][5] = {“iOS”, “iPad”, “iMac”};&lt;br&gt;      // strs本质是二维数组&lt;br&gt;      // strs存储的数组元素是字符数组(字符数组中存储的是字符串，常量字符串的副本)&lt;br&gt;      // strs[0]  第一个字符数组的首元素地址，可以访问字符数组&lt;br&gt;      // strs[1]  第二个字符数组的首元素地址&lt;br&gt;      // strs[2]  第三个字符数组的首元素地址&lt;br&gt;      printf(“%s\n”, strs[0]);&lt;br&gt;      printf(“%s\n”, strs[1]);&lt;br&gt;      printf(“%s\n”, &lt;/em&gt;strs);&lt;br&gt;      printf(“%s\n”, &lt;em&gt;(strs + 1));&lt;br&gt;      strs[0] = “mac”;  // strs[0]访问的是字符数组，必能直接赋值&lt;br&gt;&lt;br&gt;&lt;h1&gt;指针与字符串数组&lt;/h1&gt;&lt;br&gt;     //指针数组  数组中的元素都是指针&lt;br&gt;        char &lt;/em&gt; strs[3] = {“iOS”, “iPad”, “iMac”};&lt;br&gt;      //    strs本质是一维数组&lt;br&gt;      //    strs存储的数组元素是字符指针(字符指针指向常量字符串)&lt;br&gt;      //    strs[0]  第一个字符指针，指向常量区的”iOS”&lt;br&gt;      //    strs[1]  第二个字符指针，指向常量区的”iPad”&lt;br&gt;      //    strs[2]  第三个字符指针，指向常量区的”iMac”&lt;br&gt;        // 访问&lt;br&gt;        printf(“%s\n”, strs[0]);&lt;br&gt;        printf(“%s\n”, strs[1]);&lt;br&gt;        printf(“%s\n”, &lt;em&gt;strs);&lt;br&gt;        printf(“%s\n”, &lt;/em&gt;(strs + 1));&lt;br&gt;        // 修改&lt;br&gt;        strs[0] = “Symbian”;  // strs[0]访问的是字符指针，指针的重新指向另一个常量字符串&lt;br&gt;        printf(“%s\n”, strs[0]);&lt;br&gt;         // 为什么地址的差值为8?  因为指针占用八个字节，反过来印证了数组里面的元素是指针。&lt;br&gt;        printf(“%p\n”, strs);&lt;br&gt;        printf(“%p\n”, strs + 1);&lt;br&gt;        printf(“%p\n”, strs + 2);&lt;br&gt;&lt;br&gt;&lt;h1&gt;指针与函数&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;/*
 思考 如何用指针 实习两个数交换函数
 */
void changeValue2(int *p1, int *p2);//声明函数
int main(int argc, const char * argv[]) {
    int a1 = 10, b1 = 20;
    changeValue2(&amp;amp;a1, &amp;amp;b1);
    printf(&amp;quot;%d, %d&amp;quot;,a1,b1); //验证值是否替换
    return 0;
}
void changeValue2(int *p1, int *p2)
{
    int temp = *p1; // 取出p1所指向的地址里面的数据
    *p1 = *p2;
    *p2 = temp;
    printf(&amp;quot;%d   %d\n&amp;quot;, *p1, *p2); //验证是否地址的值被替换
}
//利用函数传入地址交换数值
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;h2&gt;孙悟空三大白骨精！ 感谢各位学习我的博客 C语言八讲已经结束。谢谢大家! 加油！！！&lt;/h2&gt;&lt;/center&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;童小浩还有些话要说&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;到此，C语言基础的全部八讲也结束，相信大家都应该了解和入门计算机的语言。接下来就可以，以这个基础去学习新的真正在开发中用到的高级语言比如&lt;java,js,oc,swift ...=&quot;&quot;&gt;这些语言。C语言几乎是所有语言的底层我们现在只是学习了个基础，C语言很庞大希望大家去努力学习！！&lt;/java,js,oc,swift&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第八讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;数据的存储 内存的访问方式 指针变量 取址运算符&amp;amp; 取值运算符* 指针的运算符&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;本
    
    </summary>
    
      <category term="讲义" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="C语音" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/C%E8%AF%AD%E9%9F%B3/"/>
    
    
      <category term="C语言" scheme="http://www.tongxiaohao.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>基础C语言第七讲</title>
    <link href="http://www.tongxiaohao.cn/2016/09/23/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%83%E8%AE%B2/"/>
    <id>http://www.tongxiaohao.cn/2016/09/23/基础C语言第七讲/</id>
    <published>2016-09-23T05:51:43.000Z</published>
    <updated>2016-09-23T06:44:44.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第七讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;结构体定义、声明与应用 结构体内存占用 结构体嵌套 结构体数组 &lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;函数 函数的定义 函数声明 函数调用 参数 返回值 参数为数组的函数 函数嵌套使用  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;1·结构体定义、声明与应用&lt;/h1&gt;&lt;br&gt;1)什么是结构体 如何描述坐标系内一个点(x,y) 如何描述一个矩形 (长，宽) 如何保存一个student信息&lt;br&gt;   结构体 标识 struct&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct student{ //struct 结构体名称
char name[20]; //类型说明符 成员名(姓名)
int age; //（年龄）
char sex; //（性别）
};
typedef struct student students;//给结构体起别名
//结构体 第二种
struct{ //定义结构体
char name[20];
int age;
}teacher1 = {&amp;quot;tongxiaohao&amp;quot;,22};  //直接赋值
//结构体写在main函数之外
int main(int argc, const char * argv[]) {
//结构体定义 struct 加 结构体名称 就是结构体类型 stu 一个成员名 直接对应赋值{};
students stu1 = {&amp;quot;还好吧&amp;quot;,22,&amp;apos;M&amp;apos;};
//结构体成员用.点出来 和普通变量一样 可以直接赋值
stu1.age = 10;
#warning ~~~~~~
//    printf(&amp;quot;%ld&amp;quot;,);
//    char a[20] = &amp;quot;aaa&amp;quot;; //数组不能直接赋值
//    stu1.name = {&amp;apos;a&amp;apos;,&amp;apos;\0&amp;apos;};
//    stu1.name = &amp;quot;aaa&amp;quot;;
printf(&amp;quot;%s %d %c \n&amp;quot;,stu1.name,stu1.age,stu1.sex);
//匿名结构体
printf(&amp;quot;%s&amp;quot;,teacher1.name);
typedef int inther; //typedef 其别名 类型明 新类型名
inther a = 0;
printf(&amp;quot;%d&amp;quot;,a);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;2·结构体内存占用&lt;/h1&gt;&lt;br&gt;规则：&lt;br&gt;&lt;br&gt;1，以最大成员变量类型所占空间为分配空间(数组不算)&lt;br&gt;&lt;br&gt;2，自上到下分配&lt;br&gt;&lt;br&gt;3，变量空间不足时创建新空间&lt;br&gt;&lt;br&gt;例子&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct student{ //struct 结构体名称
char name[20]; //char类型数组 实质上就是20个char 
int age; //（年龄）int类型 4个字节
char sex; //（性别）char类型 1个字节
};
//计算 20 + 4 + 4 = 28 因为遇到了int是最大字节 以4字节为开辟单位
//每4个字节开辟 20字节开辟了 5个可以放下 int自己开辟4个 char以4字节开辟 所以
//20 + 4 + 4 = 28
//使用 sizeof 字节运算符 输出结果28 
printf(&amp;quot;%lu\n&amp;quot;,sizeof(struct student));
//如果int 变double呢 以每8个字节分配 计算 20 / 8 = 2余4； 所以3个8才够放下 20字节
//3 * 8 + 8 + 8 = 40
//再次输出
printf(&amp;quot;%lu\n&amp;quot;,sizeof(struct student));
//结果40.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;3·结构体嵌套&lt;/h1&gt;&lt;br&gt;就是在结构体定义时 内部还有其他结构体&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//例子
struct teacher { //老师结构体
struct student stu[30]; //里面有30个学生结构体
char classname[20]; //还有班级名称
};
//如果学生结构体有别名可以
struct teacher {
students stu; 
//学生结构体 这表示就一个学生可以将  struct student 直接改为别名students
char classname[20];
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;4·结构体数组&lt;/h1&gt;&lt;br&gt;很简单 跟int的数组一样可以用角标表示数组里某一个结构体（学生）&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    students stu[10] = {0};
 //跟int 一样的定义 也是可以通过下标访问结构体变量
 //例子
    Student stus[5] = {
        {1, &amp;quot;lixiwen&amp;quot;, &amp;apos;f&amp;apos;, 91},
        {2, &amp;quot;yangguozhen&amp;quot;, &amp;apos;m&amp;apos;, 94.5},
        {3, &amp;quot;wangdashuai&amp;quot;, &amp;apos;m&amp;apos;, 97},
        {4, &amp;quot;qihuanling&amp;quot;, &amp;apos;f&amp;apos;, 95},
        {5, &amp;quot;houxiaolan&amp;quot;, &amp;apos;f&amp;apos;, 98}
        };
    Student s = {0};
    for (int i = 0; i &amp;lt; 5; i++) {
        if (s.score &amp;lt; stus[i].score) {
            s = stus[i];
        }
    }
    printf(&amp;quot;%d  %s  %c  %.1f\n&amp;quot;, s.num, s.name, s.gender, s.score);
//例子
//练习：对上述5名学生数组，按成绩 从高到低 排序，并输出
    for (int i = 0; i &amp;lt; (5 - 1); i++) {
        for (int j = 0; j &amp;lt; 5 - (i + 1); j++) {
            if (stus[j].score &amp;lt; stus[j+1].score) {

                Student temp = stus[j];
                stus[j] = stus[j+1];
                stus[j+1] = temp;
            }
        }
    }
    for (int i = 0; i &amp;lt; 5; i++) {
        printf(&amp;quot;%d  %s  %c  %.1f\n&amp;quot;, stus[i].num, stus[i].name, stus[i].gender, stus[i].score);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;center&gt;&lt;h2&gt;孙悟空三大白骨精！ 感谢各位学习我的博客 C语言七讲已经结束。谢谢大家! 加油！！！&lt;/h2&gt;&lt;/center&gt;&lt;/p&gt;

















</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第七讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;结构体定义、声明与应用 结构体内存占用 结构体嵌套 结构体数组 &lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;函数 函数
    
    </summary>
    
      <category term="讲义" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="C语音" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/C%E8%AF%AD%E9%9F%B3/"/>
    
    
      <category term="C语言" scheme="http://www.tongxiaohao.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>基础C语言第六讲</title>
    <link href="http://www.tongxiaohao.cn/2016/05/12/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%85%AD%E8%AE%B2/"/>
    <id>http://www.tongxiaohao.cn/2016/05/12/基础C语言第六讲/</id>
    <published>2016-05-12T08:22:34.000Z</published>
    <updated>2016-09-23T06:43:57.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第六讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;预编译 宏定义 函数 递归&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;二维数组 字符串数组 多维数组
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;预编译&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;#if 1 //#if 为真 只会编译在if到else里面的内容 否则编译else到endif的内容

#else

#endif
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;宏定义&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;#define kAth (12) //命名规范要不就是大写要不开头以k开通第一个字母大写
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;函数&lt;/h1&gt;

&lt;h1&gt;//练习1.1&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;void dayin1(int a);//函数声明
void hello(void);//函数声明
int bijiaodaxiao (int a, int b); //函数声明
int wuCanYouFanHuiZhi(void);//函数声明
int sumValue(int n);//函数声明
int dayOfYear(int year,int mouth, int day);//函数声明
int main(int argc, const char * argv[]) {
    int a = bijiaodaxiao(22, 21); //函数的调用
    printf(&amp;quot;%d&amp;quot;,a);
    dayin(&amp;quot;aaaa&amp;quot;);
    /*
     一， 函数是什么东西 土豪例子
     我很有钱我叫我的管家去买饭 叫我的下人去干活 自己只看结果
     什么是函数  具有特定函数的代码短
     从函数定义上看函数分两种 系统写好的函数 为库函数 自己写的函数 为自定义函数
     1，函数的定义 
     函数的返回值 为函数值 用return 返回 return 后边语句不在执行 没有返回值的函数也可以用
     参数有两种 形参 与 实参
     实参：出现在函数调用的表达式 比如 22 21
     形参：出现在函数定义中 用假名字代替调用时 所提供的值

     变量的作用域 就是变量的有效范围
     全局变量 与 局部变量 宏定义

     */
    printf(&amp;quot;\n\n&amp;quot;);
    printf(&amp;quot;%d&amp;quot;,dayOfYear(2000, 3, 1));
    //练习2.1
    printf(&amp;quot;\n%d&amp;quot;,jia(2, 3)) ;

    //函数嵌套
    //C语言中不允许嵌套定义 但是允许嵌套调用 注意不可以嵌套定义
    return 0; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//函数的4种形式&lt;br&gt;&lt;br&gt;//函数的定义&lt;br&gt;&lt;br&gt;//返回值类型 函数名称 形式参数列表&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int bijiaodaxiao (int a, int b){ //有参 有返回值 (函数实现)
    return a &amp;gt; b ? a : b;
}
void hello(void){ //无参 无返回值(函数实现)
    printf(&amp;quot;hello&amp;quot;);
}
void dayin1(int a){ //有参 无返回值(函数实现)
    printf(&amp;quot;%d&amp;quot;,a);
}
int wuCanYouFanHuiZhi(void){ //无参 有返回值(函数实现)
    return 20; //后面语句不在执行
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;//练习1.2&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;int sumValue(int n){//(函数实现)
    int a = 0;
    for (int i = 1; i &amp;lt;= n; i ++) {
            a = a + i;
    }
return a;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;//练习1.3&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;int dayOfYear(int year,int mouth, int day){//(函数实现)
// 31,28,31,30,31,30,31,31,30,31,30,31
    int a[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
    int dayofyear = 0;

    if ((year % 400 == 0) || ((year % 4 == 0) &amp;amp;&amp;amp; (year % 100 == 0))) {
        if (mouth &amp;gt; 2) {
            dayofyear = 1;
        }
    }

    for (int i = 1; i &amp;lt; mouth; i ++) {
           dayofyear = dayofyear + a[i - 1];
    }
    return dayofyear + day;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;数组作为参数&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;void dayin(char *s){ //写在上方不用声明
    printf(&amp;quot;%s&amp;quot;,s);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;递归 练习1.4 打断点演示一下自己就好了&lt;/h1&gt;&lt;br&gt;// 5! = 5 &lt;em&gt; 4!&lt;br&gt;&lt;br&gt;// 4! = 4 &lt;/em&gt; 3! …&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int func(int n)
{
    //    printf(&amp;quot;正在计算%d的阶乘\n&amp;quot;, n);

    // 0和1的阶乘都是1
    if (n == 0 || n == 1) {//（递归一定要有出口）

        return 1;
    }
    // 5! = 5 * 4!
    // 4! = 4 * 3! ...
    int result = n * func(n - 1);//(递归就是函数里面又调用了函数)

    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;center&gt;&lt;h2&gt;孙悟空三大白骨精！ 感谢各位学习我的博客 C语言六讲已经结束。谢谢大家! 加油！！！&lt;/h2&gt;&lt;/center&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第六讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;预编译 宏定义 函数 递归&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;二维数组 字符串数组 多维数组
&lt;/code&gt;&lt;
    
    </summary>
    
      <category term="讲义" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="C语音" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/C%E8%AF%AD%E9%9F%B3/"/>
    
    
      <category term="C语言" scheme="http://www.tongxiaohao.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>基础C语言第五讲</title>
    <link href="http://www.tongxiaohao.cn/2016/05/12/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%94%E8%AE%B2/"/>
    <id>http://www.tongxiaohao.cn/2016/05/12/基础C语言第五讲/</id>
    <published>2016-05-12T07:11:27.000Z</published>
    <updated>2016-09-08T09:41:32.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第五讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;二维数组 字符串数组 多维数组&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一维数组 数组定义 相同数据类型的成员组成 一组数据 数组排序 （冒泡排序）
字符数组 与 字符串 结束多个\0 %s 打印是以\0为标志
字符串常用4个函数 strlen() 长度 不算’\0’strcpy()拷贝 strcat()拼接 strcmp()比较
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;一 讲课之前&lt;/h1&gt; 

&lt;pre&gt;&lt;code&gt;大家想一想 我们数学中 有个叫点动成线 这个就是 多个单一数据 就成了数组
线动成面 就是今天的二维数组 表示数组里存数组 int a[m][n] = {0}; 这里就可以看成坐标系
m代表每一行 n代表每一列 这里看起来就是 一个表格 先讲怎么输出

//    int a[4][3] = {1,2,3,4,5}; // 元素个数 m * n //不够 补0
//    for (int i = 0; i &amp;lt; 4; i ++) {
//        for (int k = 0; k &amp;lt; 3; k ++) {
//            printf(&amp;quot;%d&amp;quot;,a[i][k]);
//        }
//        printf(&amp;quot;\n&amp;quot;);
//    }
//    char s[4][3] = {&amp;apos;a&amp;apos;,&amp;apos;a&amp;apos;,&amp;apos;a&amp;apos;,&amp;apos;a&amp;apos;};// char 不够补空格
//    for (int i = 0; i &amp;lt; 4; i ++) {
//        for (int k = 0; k &amp;lt; 3; k ++) {
//            printf(&amp;quot;%c &amp;quot;,s[i][k]);
//        }
//        printf(&amp;quot;\n&amp;quot;);
//    }
//    char c[3] = {&amp;apos;a&amp;apos;,&amp;apos;a&amp;apos;,&amp;apos;a&amp;apos;};
//    for (int i = 0; i &amp;lt; 3; i ++) {
//        printf(&amp;quot;%c &amp;quot;,c[i]);
//    }
//    printf(&amp;quot;\n&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;练习1.1&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;int a[2][3] = {{1,2,3},{4,5,6}};
int b[3][2] = {0};
for (int i = 0; i &amp;lt; 2; i ++) {
    for (int k = 0; k &amp;lt; 3; k ++) {
        b[k][i] = a[i][k];
    }
}
for (int i = 0; i &amp;lt; 3; i++) {
    for (int k = 0; k &amp;lt; 2; k ++) {
        printf(&amp;quot;%d&amp;quot;,b[i][k]);
    }
    printf(&amp;quot;\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt; &lt;h1&gt;练习1.2&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt; int a[3][4] = {{5,6,7,11}
                  ,{9,0,1,12}
                  ,{1,2,3,4}};
int max = 0;
int x = 0;
int y = 0;
for (int i = 0; i &amp;lt; 3; i ++) {
    for (int k = 0; k &amp;lt; 4; k ++) {
        if (a[i][k] &amp;gt; max) {
            max = a[i][k];
            x = i;
            y = k;
        }
    }
}
printf(&amp;quot;max = %d&amp;quot;,max);
printf(&amp;quot;在第%d行，第%d列&amp;quot;,x,y);
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;二 字符串数组&lt;/h1&gt;&lt;br&gt;1、字符数组：数据元素是 字符 的数组，一维数组&lt;br&gt;&lt;br&gt;2、字符串数组：数据元素是 字符串 的数组，二维数组。 字符串本身也是字符数组&lt;br&gt;&lt;br&gt;    //    char string[3][50] = {“hello”,”童小浩”,”C语言”};&lt;br&gt;    //    for(int i = 0;i &amp;lt; 3; i ++){&lt;br&gt;    //        printf(“%s”,string[i]); //访问每一个字符串 string[2][2] 访问某一个字符&lt;br&gt;    //    }&lt;br&gt;&lt;br&gt;&lt;h1&gt;练习2.1&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;//    char names[3][30] = {&amp;quot;yujiangchuan&amp;quot;, &amp;quot;xuedongxiao&amp;quot;, &amp;quot;fandeng&amp;quot;};
//
//    int maxLength = 0;
//
//    for (int i = 0; i &amp;lt; 3; i++) {
//
//        int length = (int)strlen(names[i]);
//
//        if (maxLength &amp;lt; length) {
//
//            maxLength = length;
//        }
//
//    }
//
//    printf(&amp;quot;max length = %d&amp;quot;, maxLength);
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;练习2.2&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;// 使用冒泡排序
//    char names[3][30] = {&amp;quot;yujiangchuan&amp;quot;, &amp;quot;xuedongxiao&amp;quot;, &amp;quot;fandeng&amp;quot;};
//
//    for (int i = 0; i &amp;lt; 3-1; i++) {
//
//        for (int j = 0; j &amp;lt; 3-1-i; j++) {
//
//            // 比较两个字符串的大小
//            if (strcmp(names[j], names[j+1]) &amp;gt; 0) {
//
//                // 交换字符串
//                char name[30] = {0};
//                strcpy(name, names[j]);
//                strcpy(names[j], names[j+1]);
//                strcpy(names[j+1], name);
//
//            }
//        }
//    }
//    
//    for (int i = 0; i &amp;lt; 3; i++) {
//        
//        printf(&amp;quot;%s\n&amp;quot;, names[i]);
//    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//从控制台输入字符串&lt;br&gt;&lt;br&gt;//字符数组存储字符串&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//    char a[100] = {0};
// gets() 从标准输入设备读取字符串，以回车结束读取，使用&amp;apos;\0&amp;apos;结尾，回车符&amp;apos;\n&amp;apos;被舍弃没有遗留在缓冲区。
// 可以用来输入带空格的字符串。
// 可以无限读取，不会判断上限，因此使用gets不安全，可能会造成溢出

//    printf(&amp;quot;请输入字符串：&amp;quot;);
//    gets(a);
//    printf(&amp;quot;%s\n&amp;quot;, a);
// scanf(&amp;quot;%s&amp;quot;, a);  以 空格 或 回车符 结束读取，空格 或 回车符 会遗留在缓冲区.
// 不能直接输入带空格的字符串。

//    printf(&amp;quot;请输入字符串：&amp;quot;);
//    scanf(&amp;quot;%s&amp;quot;, a);
//    printf(&amp;quot;%s\n&amp;quot;, a);

// scanf(&amp;quot;%[^\n]&amp;quot;, a);  %[]输入字符集
// [^\n] 表示除了&amp;apos;\n&amp;apos;之外的字符都接收，即可以接收空格，这个可以用来输入带空格的字符串

//    printf(&amp;quot;请输入字符串：&amp;quot;);
//    scanf(&amp;quot;%[^\n]&amp;quot;, a);
//    printf(&amp;quot;%s\n&amp;quot;, a);
 从控制台输入字符串
 字符数串组存储多个字符串
 //    char names[6][20] = {}; // 定义一个字符串数组，里面有6个字符串，每个字符串的长度为20
//    printf(&amp;quot;请输入6个字符串:\n&amp;quot;);
//    for (int i = 0; i &amp;lt; 6; i++) {
//        scanf(&amp;quot;%s&amp;quot;, names[i]); // 循环输入字符串
//        getchar(); // 取出键盘缓存区里的&amp;apos;\n&amp;apos;或&amp;apos; &amp;apos;字符
//    }
//
//
//    for (int i = 0; i &amp;lt; 6; i++) {
//        
//        printf(&amp;quot;%s &amp;quot;, names[i]);
//    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;三 多维数组 &lt;/h1&gt;&lt;br&gt;了解 a[i][j][k] &lt;br&gt;元素个数n = i &lt;em&gt; j &lt;/em&gt; k 利用多层for循环 存取&lt;br&gt;&lt;br&gt;多维数组占内存 元素个数 * 每个元素所占空间&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;总结 二维数组 有两个下标 通过双层循环 存取
字符串数组 本质就是字符二维数组 字符串长度不能超过二维所规定长度-1
多维数组
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;center&gt;&lt;h1&gt;孙悟空三大白骨精！ 感谢各位学习我的博客 C语言五讲已经结束。谢谢大家! 加油！！！&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;




</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第五讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;二维数组 字符串数组 多维数组&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一维数组 数组定义 相同数据类型的成员组成 
    
    </summary>
    
      <category term="讲义" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="C语音" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/C%E8%AF%AD%E9%9F%B3/"/>
    
    
      <category term="C语言" scheme="http://www.tongxiaohao.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>基础C语言第四讲</title>
    <link href="http://www.tongxiaohao.cn/2016/04/15/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E5%9B%9B%E8%AE%B2/"/>
    <id>http://www.tongxiaohao.cn/2016/04/15/基础C语言第四讲/</id>
    <published>2016-04-15T03:29:13.000Z</published>
    <updated>2016-09-08T09:40:40.000Z</updated>
    
    <content type="html">&lt;center&gt;&lt;h1&gt;C语言第四讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;&lt;h1&gt;&lt;em&gt;数组  数组排序 字符数组&lt;/em&gt;&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 循环/ 循环控制语句while ，do while， for /  随机数 循环嵌套 /break 结束循环 / continue 跳出本次循环/ 通常与if连用 /随机数/&lt;br&gt;&lt;br&gt;&lt;h1&gt;数组&lt;/h1&gt;&lt;br&gt;1,数组定义 把相同数据类型的成员组成 一组数据&lt;br&gt;&lt;br&gt;2，数组是个构造类型 最简单的数组是一堆数组&lt;br&gt;&lt;br&gt;3，数组定义 int a[4] = {0}；也可以这样 int a[] = {1,2,3} 数组有下标 从0开始 a[0] 就是1；&lt;br&gt;数组元素不带 类型标识&lt;br&gt;&lt;br&gt;4，数组通常和for循环一起用&lt;br&gt;&lt;br&gt;    int a[5] = {1,2,3,4,5};&lt;br&gt;    //输出每一个数组中元素的值&lt;br&gt;    for (int i = 0; i &amp;lt; 5; i++){&lt;br&gt;        printf(“%d\n”,a[i]);&lt;br&gt;    }&lt;br&gt;&lt;br&gt;注意事项&lt;br&gt;&lt;br&gt;    1、定义数组 和 数组元素&lt;br&gt;    2、数组作为一个整体不能直接参与运算&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt;数组排序 就是数组内部按一定关系排序&lt;/h1&gt;&lt;br&gt;1、常见的排序方法：冒泡排序、选择排序、插入排序等等&lt;br&gt;&lt;br&gt;2、排序的规律有两种：升序（小~大）、降序（大~小）&lt;br&gt;&lt;br&gt;3、本节课：冒泡排序。&lt;br&gt;&lt;br&gt;4、冒泡排序的基本思路：每次将相邻的两个数进行比较，按照升序或降序的顺序进行交换，直到所有数字的顺序全部正确。&lt;br&gt;&lt;br&gt;冒泡排序（只适合小范围的数据排序）（20遍）&lt;br&gt;&lt;br&gt;&lt;br&gt;请仔细看下面图片理解冒泡排序：&lt;br&gt;&lt;center&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/25223707-da62d63797924c5aba0579f9b46bbbab.gif&quot; width=&quot;200&quot; height=&quot;120&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.cnblogs.com/kanlei/archive/2013/11/25/3442384.html&quot;&gt;上面图片由KANLEI博客提供感谢&lt;/a&gt;&lt;/center&gt;

&lt;pre&gt;&lt;code&gt;int sort_arr[5] = {5,4,3,2,1}; // 外层循环，控制排序趟数,趟数为 ：数组元素个数-1
//    for (int i = 0; i &amp;lt; (5-1)/*5-1，表示数组有n个数比较，只比较n-1趟*/; i ++) {
//        // 内层for循环，控制比较次数
//        for (int j = 0; j &amp;lt; 5 - (i+1)/*本来应该是5-i，但是i是从0 开始的，我们要得是从1开始，因此要5-（i+1）。此处的意思是每一趟，比较多少次。*/; j ++) {
//            // 判断，并且交换。
//            if (sort_arr[j] &amp;gt; sort_arr[j+1]) {
//                利用中间变量进行交换值
//                int temp = sort_arr[j];
//                sort_arr[j] = sort_arr[j+1];
//                sort_arr[j+1] = temp;
//                
//            }
//        }
//    }
//    //打印
//    printf(&amp;quot;冒泡排序后：&amp;quot;);
//    for (int i = 0; i &amp;lt; 5; i ++) {
//        printf(&amp;quot;%d &amp;quot;,sort_arr[i]);
//    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;练习 1 &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//    int array[10] = {0};
//    printf(&amp;quot;排序前的10个数为：\n&amp;quot;);
//    //取随机数
//    for (int i = 0; i &amp;lt; 10 ; i ++) {
//        unsigned num = arc4random() % 21+20;
//        array[i] = num;
//        printf(&amp;quot;%d\t&amp;quot;,array[i]);
//    }
//    // 排序开始
//    // 外层for循环，控制比较多少趟。
//    for (int i = 0; i &amp;lt; 10-1; i ++) {
//        // 内层for循环，控制比较多少次
//        for (int j = 0; j &amp;lt; 10 -(i+1); j ++) {
//            // 冒泡排序
//            if (array[j] &amp;gt; array[j+1]) {
//                
//                int temp = array[j];
//                array[j] = array[j+1];
//                array[j+1] = temp;
//            }
//        }
//    }
//    printf(&amp;quot;\n排序后的10 个数为：\n&amp;quot;);
//    for (int i = 0 ; i &amp;lt; 10 ; i ++) {
//        printf(&amp;quot;%d  &amp;quot;,array[i]);
//    }
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;字符数组&lt;/h1&gt;

&lt;p&gt;1,char[] = {‘i’,’P’,’h’,’o’,’n’,’e’}&lt;br&gt;&lt;br&gt;char[] = “iPhone”;&lt;br&gt;&lt;br&gt; 字符串&lt;br&gt;&lt;br&gt;(1)字符串常量  “hello world”&lt;br&gt;&lt;br&gt;(2)使用字符数组存储字符串&lt;br&gt;&lt;br&gt;(3)使用%s，输出字符串&lt;br&gt;&lt;br&gt;/ 定义字符数组存储字符串&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// char a[] = &amp;quot;hello world&amp;quot;;    
// 系统如何识别字符串:&amp;apos;\0&amp;apos;。 数据存储在内存中，系统如何识别哪些字符属于一个完整的字符串。
// &amp;apos;\0&amp;apos; 是字符串结束标志，在字符串的最后一位，由系统默认添加   空操作，不可以显示字符
// &amp;quot;hello&amp;quot;存储时，实际上是：&amp;apos;h&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;\0&amp;apos;
// 有效字符：在字符串中，&amp;apos;\0&amp;apos;之前的字符
// 字符数组a中存储着字符串，数组中的元素为：&amp;apos;h&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;\0&amp;apos;
// 存储字符串的字符数组元素个数 = 有效字符个数 + 1
// 输出字符串
// printf(&amp;quot;%s&amp;quot;, a);  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2,字符串和字符数组的关系&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sizeof( ) 是 计算字节的运算符
// (1)字符串是一个字符数组
//    char a[] = &amp;quot;hello&amp;quot;;
//    char b[] = {&amp;apos;h&amp;apos;, &amp;apos;e&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;\0&amp;apos;};
//    // a、b都是数组
//    // 两个数组中存储的内容都是 字符串hello
//    // 都可以访问、修改数据元素、遍历
//    a[0] = &amp;apos;a&amp;apos;;
//    for (int i = 0; i &amp;lt; sizeof(a) / sizeof(char); i++) {
//        printf(&amp;quot;a[%d] = %c  b[%d] = %c\n&amp;quot;, i, a[i], i, b[i]);
//    }
//(2)字符数组不一定是字符
//    char a[] = {&amp;apos;l&amp;apos;, &amp;apos;a&amp;apos;, &amp;apos;n&amp;apos;, &amp;apos;o&amp;apos;, &amp;apos;u&amp;apos;};
//    char b[] = &amp;quot;lanou&amp;quot;;
// a和b都是字符数组
// 数组a中存储了5个字符；数组b中存储了6个字符，存储的是一个字符串
// 使用{}方式初始化字符数组时，如果数组元素包含’\0&amp;apos;，存储的内容才能称为字符串
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字符串常用4个函数 strlen() 长度 不算’\0’strcpy()拷贝 strcat()拼接 strcmp()比较&lt;br&gt;&lt;br&gt;自己把这个常用的4个函数练习一下&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;char hello[] = &amp;quot;hello&amp;quot;;
char name[] = &amp;quot;tongxiaohao&amp;quot;;
//计算字符串长度 strlen()
unsigned long strlong = strlen(hello);
//不算’\0’
printf(&amp;quot;%lu\n&amp;quot;,strlong);
printf(&amp;quot;%lu\n&amp;quot;,strlen(name));
/*
 5
 11
 */
//拷贝strcpy()
char strcpying[256];//开辟空间
//将后边的字符串复制到前面的字符串中
strcpy(strcpying, name);
printf(&amp;quot;%s\n&amp;quot;,strcpying);
/*
tongxiaohao
 */
//strcat()拼接
/*
    注意点拼接返回到第一个字符串中
    但是第一个字符串中要足够长的空间
 */
strcat(strcpying, hello);
printf(&amp;quot;%s\n&amp;quot;,strcpying);
/*
tongxiaohaohello
 */
/*
    strcmp()比较
 如果相同 为0; a
 如果前大于后 为负数 a1
 如果后大于前 为正数 a2
 */
char s1[] = &amp;quot;aac&amp;quot;;
char s2[] = &amp;quot;abc&amp;quot;;
char s3[] = &amp;quot;aac&amp;quot;;
int a = strcmp(s1,s3);
int a1 = strcmp(s2,s1);
int a2 = strcmp(s1,s2);
printf(&amp;quot;a = %d,a1 = %d,a2 = %d\n&amp;quot;,a,a1,a2);
/*
 a = 0,a1 = 1,a2 = -1
 */
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;练习 2 &lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//    char str[] = &amp;quot;I love iOS, i want an iPhone6&amp;quot;;
//    
//    int n = 0;
//    int count = 0;
//    
//    while (str[n] != &amp;apos;\0&amp;apos;) {
//        
//        if (str[n] == &amp;apos; &amp;apos;) {
//            
//            count++;
//        }
//        
//        n++;
//    }
//
//    printf(&amp;quot;空格数量：%d\n&amp;quot;, count);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;练习&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//只循环一半，不能交换&amp;apos;\0&amp;apos;
//    char str[] = &amp;quot;afjnpue&amp;quot;;
//    
//    int length = (int)strlen(str);
//    
//    for (int i=0; i&amp;lt;length/2; i++) {
//        
//        //交换
//        char tmp = str[i];
//        str[i] = str[length-1-i];
//        str[length-1-i] = tmp;
//    }
//    
//    printf(&amp;quot;%s&amp;quot;,str);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;center&gt;&lt;h1&gt;孙悟空三大白骨精！ 感谢各位学习我的博客 C语言四讲已经结束。谢谢大家! 加油！！！&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;h1&gt;C语言第四讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;&lt;h1&gt;&lt;em&gt;数组  数组排序 字符数组&lt;/em&gt;&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 循环/ 循环控制语句while ，do while， for /  随机数 
    
    </summary>
    
      <category term="讲义" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="C语音" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/C%E8%AF%AD%E9%9F%B3/"/>
    
    
      <category term="C语言" scheme="http://www.tongxiaohao.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>基础C语言第三讲</title>
    <link href="http://www.tongxiaohao.cn/2016/04/14/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%89%E8%AE%B2/"/>
    <id>http://www.tongxiaohao.cn/2016/04/14/基础C语言第三讲/</id>
    <published>2016-04-14T06:05:59.000Z</published>
    <updated>2016-09-08T09:39:38.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第三讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;循环  循环的 控制 语句 “while，do while，for” 随机数 循环嵌套&lt;br&gt;&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 BOOL  关系运算符  逻辑运算符 逻辑与 &amp;amp;&amp;amp; 逻辑或 || 逻辑 ！非  分支结构\if  enum\枚举\switch&lt;/p&gt;
&lt;h1&gt;循环&lt;/h1&gt;

&lt;p&gt;为什么要用循环 ?&lt;br&gt;&lt;br&gt;先做一个程序 输出 10 个 hello word&lt;br&gt;&lt;br&gt;再输出 100 个呢？&lt;br&gt;&lt;br&gt;/打印 hello world 100遍，如果打印1000、10000遍呢&lt;br&gt;&lt;br&gt; 可以复制粘贴，但是会造成两个问题。&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一个：相同的代码太多，冗余  第二个：复制过程中，可能会出现问题，数量不对，代码可读性很差
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用循环就是为了解决这个问题&lt;br&gt;&lt;br&gt;这就是要用到循环结构： 进行循环&lt;br&gt;&lt;br&gt;当符合条件时候， 重复某一代码&lt;br&gt;&lt;br&gt;循环的作用：减少重复冗余代码，增加代码可读性，易于维护&lt;/p&gt;
&lt;h1&gt;循环的 控制 语句 while do while for&lt;/h1&gt;

&lt;h1&gt;1 while：&lt;/h1&gt;&lt;br&gt;    while(条件表达式){   &lt;br&gt;&lt;br&gt;    要先判断条件表达式 &lt;br&gt;在执行 代码 如果条件为假 &lt;br&gt;将终止循环 包括第一次 如果条件为假 将不会执行以下代码&lt;br&gt;        需要重复运行的代码&lt;br&gt;&lt;br&gt;     }&lt;br&gt;&lt;br&gt;&lt;br&gt;     int i = 0;&lt;br&gt;     while (i &amp;lt; 5) { // 0，1，2，3，4;&lt;br&gt;     printf(“%d\n”,i);&lt;br&gt;          }&lt;br&gt;&lt;br&gt;练习题 #输出1～100个位数是7的数&lt;br&gt;&lt;br&gt;&lt;br&gt;    int i = 1;&lt;br&gt;    while (i &amp;lt;= 100) {&lt;br&gt;        if (i  % 10 == 7) {&lt;br&gt;            printf(“%d\n”,i);&lt;br&gt;        }&lt;br&gt;        i ++;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;练习题 #输出1～100包含7的数&lt;br&gt;&lt;br&gt;&lt;br&gt;    int i = 1;&lt;br&gt;    while (i &amp;lt;= 100) {&lt;br&gt;        if (!(i  % 10 == 7 )&amp;amp;&amp;amp; !(i / 10 % 10 == 7) &amp;amp;&amp;amp; !(i % 7 == 0)) {&lt;br&gt;            printf(“%d\n”,i);&lt;br&gt;        }&lt;br&gt;        i ++;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt;随机整数 break continue&lt;/h1&gt;&lt;br&gt;随机整数&lt;br&gt;&lt;br&gt;&lt;br&gt;     int a = 0;&lt;br&gt;    a = arc4random() % 10; // 0,1,2,3,4,5,6,7,8,9 个数字 对N取余 取值范围 0 ～ N - 1；&lt;br&gt;&lt;br&gt;如果是 2 ～ 10 之间的呢&lt;br&gt;&lt;br&gt;    int a = 0;&lt;br&gt;        a = arc4random() % 9+ 2;&lt;br&gt;&lt;br&gt;所以有个公式 [m,n]之间的 随机数&lt;br&gt;&lt;br&gt;&lt;br&gt;    a = arc4random() % (n - m + 1)+ m;&lt;br&gt;&lt;br&gt;break ：&lt;br&gt;&lt;br&gt;&lt;br&gt;    int i = 1;&lt;br&gt;    while (i) { // 0，1，2，3，4，5，6;&lt;br&gt;        if (i &amp;gt; 6) {&lt;br&gt;            break; //用于结束循环&lt;br&gt;        }&lt;br&gt;        printf(“%d\n”,i);&lt;br&gt;        i ++;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;continue:&lt;br&gt;&lt;br&gt;&lt;br&gt;    int i = 1;&lt;br&gt;    while (i &amp;lt; 5) {&lt;br&gt;        if (i == 2) {&lt;br&gt;            i ++;//注意一定要加 否则每次 都==2 程序循环到这里了&lt;br&gt;            continue; //跳出本次循环 下面的代码不在执行&lt;br&gt;        }&lt;br&gt;        printf(“%d\n”,i);&lt;br&gt;        i ++;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;&lt;h1&gt;for&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;int i = 10;
while (i--) { //注意- -i
    printf(&amp;quot;%d\n&amp;quot;,i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;for(循环变量初始值;循环条件;循环变量增值){&lt;br&gt;&lt;br&gt;    需要循环的代码&lt;br&gt;&lt;br&gt;}&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (int i = 10; i &amp;gt; 0;i-- ){
    printf(&amp;quot;%d\n&amp;quot;,i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实 循环初始值 就是 while 变量的定义 int i ＝ 0；&lt;br&gt;&lt;br&gt;循环条件呢 就是 while后边括号里的内容&lt;br&gt;&lt;br&gt;增值就是 while 循环里面 i ++；大括号里依然就是需要循环的代码&lt;br&gt;&lt;br&gt;利用for循做上面的两道练习题&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h1&gt;do….while&lt;/h1&gt;&lt;br&gt;while：先判断，再执行//do…while：先执行一次，在判断&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int i = 0;
do{
    printf(&amp;quot;%d\n&amp;quot;,i);
    i++;
}while(i&amp;lt;5); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ps:do…while保证会执行一次&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h1&gt;循环嵌套&lt;/h1&gt;&lt;br&gt;什么是循环嵌套 就是循环里 还有循环&lt;br&gt;用for 循环 写一个循环嵌套 思考一下&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//打印—&amp;gt;第一步打印 —&amp;gt; 第二步打印 —&amp;gt;第三步

//1        123        123       1        
//12                  123       12
//123                 123       123


for (int i = 1; i &amp;lt; 4; i ++) {
    for(int j = 1;j &amp;lt; i + 1; j ++){
        printf(&amp;quot;%d &amp;quot;,j);
    }
    printf(&amp;quot;\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;练习&lt;strong&gt;&lt;em&gt;*&lt;/em&gt;&lt;/strong&gt; 乘法表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for (int k = 1; k &amp;lt; 10; k ++) {
    for(int i = 1;i &amp;lt; k + 1; i ++){
        printf(&amp;quot;%2d * %-d = %-2d&amp;quot;,i,k,i * k);
    }
    printf(&amp;quot;\n&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;总结&lt;/h1&gt;&lt;br&gt;for 通常用于知道循环次数&lt;br&gt;&lt;br&gt;while 通常用于不知道循环次数 用break结束循环 &lt;br&gt;&lt;br&gt;do while 用处很少 &lt;br&gt;&lt;br&gt;break 结束循环 continue 跳出本次循环 通常与if连用&lt;br&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;孙悟空三大白骨精！ 感谢各位学习我的博客 C语言三讲已经结束。谢谢大家! 加油！！！&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;



</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第三讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;循环  循环的 控制 语句 “while，do while，for” 随机数 循环嵌套&lt;br&gt;&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 BOOL  
    
    </summary>
    
      <category term="讲义" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="C语音" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/C%E8%AF%AD%E9%9F%B3/"/>
    
    
      <category term="C语言" scheme="http://www.tongxiaohao.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods使用步骤已安装Ruby环境</title>
    <link href="http://www.tongxiaohao.cn/2016/04/01/CocoaPods%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4%E5%B7%B2%E5%AE%89%E8%A3%85Ruby%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.tongxiaohao.cn/2016/04/01/CocoaPods使用步骤已安装Ruby环境/</id>
    <published>2016-04-01T05:30:34.000Z</published>
    <updated>2016-09-08T09:35:31.000Z</updated>
    
    <content type="html">&lt;h1&gt;&lt;center&gt;CocoaPods使用步骤已安装Ruby环境&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;CocoaPods使用步骤(已有Ruby环境):&lt;/p&gt;&lt;br&gt;&lt;p&gt;其实如果你安装了Xcode 就已经有了 Ruby环境&lt;/p&gt;&lt;br&gt;&lt;p&gt;（注：$为提示作用，不要在终端中输入）&lt;/p&gt;&lt;br&gt;&lt;p&gt;1.打开终端,输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem sources --remove https://rubygems.org/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;等有反应之后再敲入以下命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem sources -a https://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem sources -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 只有在终端中出现下面文字才表明你上面的命令是成功的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*** CURRENT SOURCES ***

http://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.5 升级gem命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem update --system
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.安装CocoaPods,在终端输入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods

$ sudo gem install -n /usr/local/bin cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.cocoaPod镜像(一般不会用到)&lt;/p&gt;&lt;br&gt;&lt;p&gt;1)$ pod repo remove master&lt;/p&gt;&lt;br&gt;&lt;p&gt;2)$ pod repo add master &lt;a href=&quot;https://gitcafe.com/akuandev/Specs.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gitcafe.com/akuandev/Specs.git&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;3)$ pod repo update&lt;/p&gt;

&lt;p&gt;4.假设我们要在工程中导入AFNetworking类库.&lt;/p&gt;&lt;br&gt;&lt;p&gt;为了确定AFNetworking是否支持CocoaPods,可以用CocoaPods的搜索功能验证一下。在终端中输入:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pod search AFNetworking
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果显示绿体字类库名,说明CocoaPods支持该类库&lt;/p&gt;

&lt;p&gt;5.现在建一个工程,叫CocoaPodsDemo&lt;/p&gt;

&lt;p&gt;6.CocoaPods的工作原理是利用Podfile文件来下载我们指定的类库,每个工程只需要一个Podfile文件,但Podfile文件需要我们利用终端自行创建&lt;/p&gt;

&lt;p&gt;7.在终端中使用cd命令进入工程所在目录,例如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /Users/lanouhn/Desktop/Shared/CocoaPods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8.当前目录下,利用vim创建Podfile,在终端中输入:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim Podfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;9.按【i】或【a】进入插入模式,输入以下内容:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;platform :ios, &amp;apos;7.0&amp;apos;
pod &amp;quot;AFNetworking&amp;quot;, &amp;quot;~&amp;gt; 2.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(这两行内容是在AFNetworking的github页面找到的。&lt;br&gt;这两句文字的意思是，当前AFNetworking支持的iOS最高版本是iOS 7.0, 要下载的AFNetworking版本是2.0)&lt;/p&gt;

&lt;p&gt;输入完毕后,按【ESC】返回命令行模式&lt;/p&gt;&lt;br&gt;&lt;p&gt;按【:】(冒号)进入末行模式,输入【wq】保存命令并退出vim&lt;/p&gt;

&lt;p&gt;10.这时你会发现工程目录中，出现一个名为Podfile的文件，而且文件内容就是刚刚输入的内容。&lt;br&gt;(注意,Podfile文件应该和工程文件.xcodeproj在同一个目录下)&lt;/p&gt;

&lt;p&gt;此时就可以利用CocoPods下载AFNetworking类库了,还是在终端中的当前工程目录下，运行以下命令:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pod install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;(个人猜测,执行该命令后,CocoPods自动会找到该目录下的Podfile文件,下载文件内容对应的第三方类库)&lt;/p&gt;&lt;br&gt;&lt;p&gt;[ps.最近使用CocoaPods来添加第三方类库，无论是执行pod install还是pod update都卡在了Analyzing dependencies不动&lt;/p&gt;&lt;br&gt;&lt;p&gt;原因在于当执行以上两个命令的时候会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少。加参数的命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pod install --verbose --no-repo-update
$ pod update --verbose --no-repo-update]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;11.执行完毕后,终端会出现以下信息:&lt;/p&gt;

&lt;p&gt;EricmatoMacBook-Pro:CocoaPodsDemo ericwang$ pod install&lt;/p&gt;&lt;br&gt;&lt;p&gt;Analyzing dependencies&lt;/p&gt;&lt;br&gt;&lt;p&gt;Downloading dependencies&lt;/p&gt;&lt;br&gt;&lt;p&gt;Installing AFNetworking (2.0.2)&lt;/p&gt;&lt;br&gt;&lt;p&gt;Generating Pods project&lt;/p&gt;&lt;br&gt;&lt;p&gt;Integrating client project&lt;/p&gt;

&lt;p&gt;[!] From now on use &lt;code&gt;CocoaPodsDemo.xcworkspace&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(注意最后一句话，意思是:以后打开工程就用 CocoaPodsDemo.xcworkspace 打开,而不是之前的.xcodeproj文件)&lt;/p&gt;

&lt;p&gt;12.此时工程目录会多一个.xcworkspace文件,一个“Podfile.lock”文件和一个文件夹“Pods”&lt;/p&gt;

&lt;p&gt;13.点击 .xcworkspace 打开工程,你会发现,AFNetwoking已经成功导入项目了&lt;/p&gt;&lt;br&gt;&lt;p&gt;现在，你就可以开始使用AFNetworking.h了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;可以稍微测试一下，在你的项目任意代码文件中输入(貌似不提示):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;lt;AFNetworking.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;quot;AFNetworking.h&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后编译，看看是否出错&lt;/p&gt;&lt;br&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;em&gt;**&lt;/em&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;提示我们从现在起，我们需要使用CocoaPodsTest.xcworkspace文件来开发。&lt;/p&gt;

&lt;p&gt;对于工程发生的变化，有几点需要说明：&lt;/p&gt;

&lt;p&gt;第三方库会被编译成库供我们真正的工程使用&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt;CocoaPods会将所有的第三方库以target的方式组成一个名为Pods的工程，该工程就放在刚才新生成的Pods目录下。整个第三方库工程会生成一个名称为libPods.a的静态库提供给我们自己的CocoaPodsTest工程使用。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;我们的工程和第三方库所在的工程会由一个新生成的workspace管理&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;为了方便我们直观的管理工程和第三方库，CocoaPodsTest工程和Pods工程会被以workspace的形式组织和管理，也就是我们刚才看到的CocoaPodsTest.xcworkspace文件。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;原来的工程设置已经被更改了，这时候我们直接打开原来的工程文件去编译就会报错，只能使用新生成的workspace来进行项目管理。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;&lt;center&gt;孙悟空三大白骨精！ 感谢各位学习我的博客！在此声明此博客并不是我所写下的，是谁写的已经忘记了。我只是引用，感谢原作者！！提供这么详细的使用步骤，谢谢大家&lt;/center&gt;&lt;/h1&gt;
</content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;center&gt;CocoaPods使用步骤已安装Ruby环境&lt;/center&gt;&lt;/h1&gt;

&lt;p&gt;CocoaPods使用步骤(已有Ruby环境):&lt;/p&gt;&lt;br&gt;&lt;p&gt;其实如果你安装了Xcode 就已经有了 Ruby环境&lt;/p&gt;&lt;br&gt;&lt;p&gt;（注：$为提示作用，不要在终端
    
    </summary>
    
      <category term="开发辅助" scheme="http://www.tongxiaohao.cn/categories/%E5%BC%80%E5%8F%91%E8%BE%85%E5%8A%A9/"/>
    
      <category term="命令行" scheme="http://www.tongxiaohao.cn/categories/%E5%BC%80%E5%8F%91%E8%BE%85%E5%8A%A9/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
    
      <category term="CocoaPods" scheme="http://www.tongxiaohao.cn/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>基础C语言第二讲</title>
    <link href="http://www.tongxiaohao.cn/2016/03/29/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%8C%E8%AE%B2/"/>
    <id>http://www.tongxiaohao.cn/2016/03/29/基础C语言第二讲/</id>
    <published>2016-03-29T15:54:37.000Z</published>
    <updated>2016-09-08T09:37:56.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第二讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;BOOL  关系运算符  逻辑运算符 逻辑与 &amp;amp;&amp;amp; 逻辑或 || 逻辑 ！非  分支结构\if  enum\枚举\switch&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;回顾昨天所学 N进制转换十进制 十进制转换N进制 变量的定义 运算符 赋值运算 格式化输入输出函数 输出转换格式的控制&lt;/p&gt;
&lt;h1&gt;BOOL&lt;/h1&gt;

&lt;p&gt;C语言中C89 是没有bool类型的(程序员自己用3个宏定义来表示 #define TRUE 1 #define FALSE 0 #define myBOOL int) 到了C99才有的 而OC是支持C99的&lt;/p&gt;&lt;br&gt;&lt;p&gt;bool类型 只有两个值 真，假 在OC中BOOL就是YES ，NO C bool中非零为true真 零为false假OC中1位YES 0为NO 所以bool 值其实和int 一样都是用转义符%d进行输入输;&lt;/p&gt;

&lt;h1&gt;关系运算符&lt;/h1&gt;

&lt;p&gt;1，    关系运算 &amp;lt;,&amp;gt;,==,&amp;lt;=,&amp;gt;=,!= 其实在程序中==双等号表示值等 就是比较两边的值是否相等 ‘!=’ 是不相等&lt;/p&gt;&lt;br&gt;&lt;p&gt;2，    关系运算的结果只有两个值 真 假 用bool来接收&lt;/p&gt;

&lt;h1&gt;逻辑运算符 逻辑与 &amp;amp;&amp;amp; 逻辑或 || 逻辑 ！非&lt;/h1&gt;

&lt;p&gt;1，逻辑与 逻辑运算符 &amp;amp;&amp;amp; &lt;/p&gt;&lt;br&gt;&lt;p&gt;主要 关系运算表达式1 &amp;amp;&amp;amp; 关系运算表达式2 运算符两边 都为真的时候才位真 其他假 但是有个短路现象 &lt;u&gt;需要重点强调 当左边值为假的时候不会再去运算表示式2 直接会返回假 C语言中的代码优化&lt;/u&gt;如下图&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/%26%26%E7%9F%AD%E8%B7%AF%E7%8E%B0%E8%B1%A1.png&quot; width=&quot;400&quot; height=&quot;180&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;2，逻辑或 ||&lt;/p&gt;&lt;br&gt;&lt;p&gt;逻辑或 逻辑运算符 || 主要 关系运算表达式1 || 关系运算表达式2 运算符两边 都为假的时候才位假 其他真 但是有个短路现象 &lt;u&gt;需要重点强调 当左边值为真的时候不会再去运算表示式2 直接会返回真 C语言中的代码优化 例子请参照上图自己写一下&lt;/u&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;3，逻辑 ！非&lt;/p&gt;&lt;br&gt;&lt;p&gt;就是取反运算 只对真假取反 ！YES ==NO&lt;/p&gt;&lt;br&gt;&lt;p&gt;4，运算符的优先级&lt;/p&gt;&lt;br&gt;&lt;p&gt;！&amp;gt;算数运算符&amp;gt;关系运算符&amp;gt;逻辑运算符&amp;gt;赋值运算符&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;h1&gt;分支结构&lt;/h1&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;程序的主要三种结构 顺序结构 分支结构 循环结构&lt;/p&gt;&lt;br&gt;&lt;p&gt;当你去跑步运动时候 一条马路跑下去就是 顺序 第一天学的就是 当遇到了一个十字路口 就是分支结构 今天要讲的就是分支结构 当你在学校跑道上跑圈的时候 就是循环结构 以后要讲&lt;/p&gt;&lt;br&gt;&lt;p&gt;再次强调分支 什么是分支 比如你在巷子里吃饭 很多小餐馆 你选择一个 就是一个分支 那个巷子里就有很多的分支（餐馆）&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;h1&gt;if 如果&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1 ， //如果 表达式a &amp;gt; b为真 才会执行 大括号里边的 代码否则不执行
int a = 10, b = 20;
if (a &amp;gt; b) {
        printf(&amp;quot;a &amp;gt; b&amp;quot;);
}
2，//如果 表达式a &amp;gt; b为真 才会执行 大括号里边的 代码否则执行 else 所对应的大括号里的代码
if(a &amp;gt; b){
        printf(&amp;quot;a &amp;gt; b&amp;quot;);
}else{
        printf(&amp;quot;a &amp;lt; b&amp;quot;);
}
return 0;
3，int a = 10, b = 20, c = 15;
if (a &amp;gt; b &amp;amp;&amp;amp; a &amp;gt; c) { //if 判断不成立 判断 第一个 else if 不成立 就下一个 else if 直到一个成立的 都不成立 才运行 else
           printf(&amp;quot;a最大&amp;quot;);
}else if (b &amp;gt; a &amp;amp;&amp;amp; b &amp;gt; c){
        printf(&amp;quot;b最大&amp;quot;);
}else if (c &amp;gt; a &amp;amp;&amp;amp; c &amp;gt; b){
        printf(&amp;quot;c最大&amp;quot;);
}else{
        printf(&amp;quot;最少有两个相同的大小&amp;quot;);
}
//如果 ?号前边 为真 就给前一个赋值 冒号前边的 为假就是冒号后边的
int c = a &amp;gt; b ? a : b;  介绍一个比较的简单写法 也是个条件运算符
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;enum 枚举 与 switch&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum{
        one = 1, //如果第一个不赋值 就默认为0
        tow,     //2 以下依次加1
        three,
        four,
        five
};
//目的：提高代码可读性 讲人能看懂的标识符与计算机能识别的数字建立关系
//enum写在main函数上面 如下图
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%8C%E8%8A%82%E5%9B%BE%E7%89%87.png&quot; width=&quot;240&quot; height=&quot;120&quot; alt=&quot;图片&quot;&gt;    &lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;switch case&lt;/h1&gt;&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int a = 0;
scanf(&amp;quot;%d&amp;quot;,&amp;amp;a);
/*开关*/switch (a) { //只能放整形 只能整形 变量
/*
如果a 为2 则会运行 case tow 下面的{}里的程序
如果a 为3 则会运行 case three 下面的{}里的程序
如果a 不是1，2，3 则会运行 default 下面的{}里的程序
*/
/*情况*/ case one:{ 
        printf(&amp;quot;a = 1&amp;quot;);
/*情况结束标识*/break;
    }
    case tow:{
        printf(&amp;quot;a = 2&amp;quot;);
//break很重要不能忽视否则代码会一直向下运行 case three 直到有break
        break;
    }
    case three:{
        printf(&amp;quot;a = 3&amp;quot;);
        break;
    }
    default: {//可以去掉
        printf(&amp;quot;a不是1，2，3&amp;quot;);
        break;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;center&gt;&lt;h1&gt;孙悟空三大白骨精！ 感谢各位学习我的博客 C语言二讲已经结束。谢谢大家!&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;&lt;h1&gt;C语言第二讲《C语言基础》&lt;/h1&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;h1&gt;BOOL  关系运算符  逻辑运算符 逻辑与 &amp;amp;&amp;amp; 逻辑或 || 逻辑 ！非  分支结构\if  enum\枚举\switch&lt;/h1&gt;&lt;/
    
    </summary>
    
      <category term="讲义" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="C语音" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/C%E8%AF%AD%E9%9F%B3/"/>
    
    
      <category term="C语言" scheme="http://www.tongxiaohao.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>基础C语言第一讲</title>
    <link href="http://www.tongxiaohao.cn/2016/03/25/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%80%E8%AE%B2/"/>
    <id>http://www.tongxiaohao.cn/2016/03/25/基础C语言第一讲/</id>
    <published>2016-03-25T00:55:46.000Z</published>
    <updated>2016-09-08T09:37:15.000Z</updated>
    
    <content type="html">&lt;h1&gt;&lt;center&gt;C语言第一讲《C语言基础》&lt;/center&gt;&lt;/h1&gt;

&lt;h1&gt;&lt;center&gt;进制  程序的一般形式  常量\变量\运算符  表达式  语句  基本输入\输出函数&lt;/center&gt;&lt;/h1&gt;

&lt;h1&gt;进制&lt;/h1&gt;&lt;br&gt;&lt;h1&gt;1, 进制概念 进位机制 逢多少进1&lt;/h1&gt;&lt;br&gt;十进制 用0～9表示 就是逢10进1 进1就是表示多了一位 “10”&lt;br&gt;&lt;br&gt;生活中的例子 六十进制 钟表 逢60进1 12进制 年 逢12进1 24进制 天 每一天24小时逢24进1&lt;br&gt;&lt;center&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/bbb%20%E4%B8%8B%E5%8D%882.33.40.jpeg&quot; width=&quot;100&quot; height=&quot;100&quot; alt=&quot;图片&quot;&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/%E5%8D%81%E8%BF%9B%E5%88%B6%20%E4%B8%8B%E5%8D%882.33.40.jpg&quot; width=&quot;130&quot; height=&quot;100&quot; alt=&quot;图片&quot;&gt;&lt;/center&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt;2,计算机的进制&lt;/h1&gt;&lt;br&gt;计算机使用的是二进制 逢2进1 所以位数只有0，1 例子 0，1，10，11，100&lt;br&gt;&lt;br&gt;因为目前的计算机电脑内部 只识别 是对的 还是 错的 所以 它表示的 就是1和0&lt;br&gt;&lt;br&gt;&lt;h1&gt;3,进制规则&lt;/h1&gt;&lt;br&gt;N进制 在表示所有位中 显示的 只有 0～N-1 遇到N前一位加1&lt;br&gt;&lt;br&gt;N进制 就是逢N进1&lt;br&gt;&lt;br&gt;&lt;h1&gt;4,进制转换&lt;/h1&gt;&lt;br&gt;基数 是几进制 基数就是几&lt;br&gt;&lt;br&gt;位  从右到左 就是从低位到高位 位是按照0开始数 最右边就是0；&lt;br&gt;&lt;br&gt;权  和基数一样 是几进制 权就是几&lt;br&gt;&lt;br&gt;位权  就是每一个位置 对应的单位值 N^(I - 1)&lt;br&gt;&lt;br&gt;（1）十进制转N进制&lt;br&gt;    连除倒取余&lt;br&gt;&lt;center&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%20%E4%B8%8B%E5%8D%882.33.40.jpg&quot; width=&quot;250&quot; height=&quot;300&quot; alt=&quot;图片&quot;&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;例子1：转二进制   例子2：转十六进制&lt;/center&gt;&lt;br&gt;（2） N进制转十进制&lt;br&gt;    按位求和&lt;br&gt;&lt;center&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B61%20%E4%B8%8B%E5%8D%882.33.40.jpg&quot; width=&quot;250&quot; height=&quot;100&quot; alt=&quot;图片&quot;&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B62%20%E4%B8%8B%E5%8D%882.33.40.jpg&quot; width=&quot;250&quot; height=&quot;100&quot; alt=&quot;图片&quot;&gt;&lt;/center&gt;&lt;br&gt;&lt;center&gt;例子：二进制转十进制&lt;/center&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt;5,进制数表示&lt;/h1&gt;&lt;br&gt;十进制：不加以修饰 100&lt;br&gt;&lt;br&gt;八进制：在数值前加0  表示 0573&lt;br&gt;&lt;br&gt;二进制：在数值前加0b 表示 0b1101&lt;br&gt;&lt;br&gt;十六进制：在数值前加0X 表示0X2A&lt;br&gt;&lt;br&gt;&lt;h1&gt;6,进制了解&lt;/h1&gt;&lt;br&gt;十进制：就是开发人员使用 （人）&lt;br&gt;&lt;br&gt;二进制：计算机识别的语言 0，1编码&lt;br&gt;&lt;br&gt;十六进制：因为一个十六进制数可以表示4位二进制 所以十六进制更多是为了方便表示二进制 十六进制的0～F 二进制的0000～1111&lt;br&gt;&lt;br&gt;    以上图片资源均来自百度。&lt;br&gt;&lt;br&gt;&lt;h1&gt;程序的一般形式&lt;/h1&gt;&lt;br&gt;&lt;h1&gt;1,创建程序&lt;/h1&gt;&lt;br&gt;1),选择OS X 下面的Application 选择Command Line Tool （控制台模式）点下面的Next&lt;br&gt;&lt;center&gt;如下图&lt;/center&gt;&lt;br&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/chuangjianchengxu1%20%E4%B8%8B%E5%8D%882.33.40.png&quot; width=&quot;682&quot; height=&quot;392&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;2),填写项目名称 和 开发组织机构名称 组织机构ID 选择语言 Objective -C (OC)点击Next 选择在桌面创建&lt;br&gt;&lt;center&gt;如下图&lt;/center&gt;&lt;br&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/%E5%88%9B%E5%BB%BA%E7%A8%8B%E5%BA%8F2%20%E4%B8%8B%E5%8D%882.33.40.png&quot; width=&quot;682&quot; height=&quot;392&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9%E6%A1%8C%E9%9D%A2.png&quot; width=&quot;682&quot; height=&quot;392&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt;2,程序基本介绍&lt;/h1&gt;&lt;br&gt;&lt;h1&gt;1).注释&lt;/h1&gt;

&lt;p&gt;单行注释，多行注视&lt;/p&gt;
&lt;p&gt;作用：提供思路，提示代码作用，程序并不执行 不注释你会忘记的会发现以前写的代码不知道是干什么的了&lt;br&gt;单行注视不可以换行 只是注释 //  后边到这一行的末尾 敲到回车时候就不是注释了&lt;br&gt;多行注释：/&lt;em&gt; 可以在这个之间 可以换行&lt;/em&gt;/&lt;/p&gt;
&lt;center&gt;&lt;br&gt;&lt;img src=&quot;http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A.png&quot; width=&quot;682&quot; height=&quot;392&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;&lt;/center&gt;

&lt;h1&gt;2).main 程序执行入口 又称主函数&lt;/h1&gt;&lt;br&gt;    如上图 这里我们介绍一个输出语句 printf(“你好！”); 这个就是在控制台输出&lt;br&gt;&lt;br&gt;&lt;h1&gt;3).#import 与#include&lt;/h1&gt;

&lt;p&gt;//#import 与#include 引入文件与类库 如果要在本文件中使用其他文件 就必须引入其他文件 格式两种 &amp;lt;&amp;gt; , “” .&amp;lt;&amp;gt;使用系统类库文件 “” 使用创建文件&lt;/p&gt;
&lt;h1&gt;3,数据类型&lt;/h1&gt;&lt;br&gt;&lt;h1&gt;1).数据类型的分类&lt;/h1&gt;&lt;br&gt;    1).基本数据类型 ：字符类型char 1字节 整型 int 4字节 短整型 short 2字节 长整型 long 4    字节 或8字节 单精度浮点型 float 4字节 双精度浮点型 double 8字节&lt;br&gt;    2).构造类型 ：数组 枚举&lt;br&gt;    3).    指针类型；&lt;br&gt;    4).空类型 void&lt;br&gt;&lt;h1&gt;2).数据类型的单位&lt;/h1&gt;&lt;br&gt;    数据类型的单位 字节byte比特 最常用的是位 bits 位是最小的存储单位 1字节 == 8位（二进制位）== 2位十六进制位&lt;br&gt;&lt;h1&gt;数据类型的存储&lt;/h1&gt;&lt;br&gt;    不同的数据类型，存储的空间不同 空间决定了数据类型的存储数据的范围&lt;br&gt;    1).数据类型的存储空间与操作系统有关并不是统一的 但是有个原则: short&amp;lt;=int&amp;lt;=long&amp;lt;=longlong&lt;br&gt;    2).sizeof()运算符，计算一个数据类型占用的空间 一定要记得是运算符而不是函数&lt;br&gt;    3).存储空间决定了存储数据的范围,不用背只需记得最长用到的 益处：超出了数据类型的取值范围&lt;br&gt;    常用的数据类型字节数请看分类里的介绍&lt;br&gt;    4).在整型中还有一个叫无符号标识符 unsigned 而整型区 分为来种有符合与无符号有符号的区分正负 整数对应的二进制数 最高位为1 为正整数 最高位为0 为负整数&lt;br&gt;&lt;h1&gt;常量\变量\运算符&lt;/h1&gt;&lt;br&gt;    1，常量 程序运行期间不允许改变的量 如10 ，2.5，A，转义字符不可直接打印\n 字符串常量 “你好”&lt;br&gt;    2，知道常量了 那变量的定义就是…… 程序运行可以改变的量变量代表存储区域 用于储存内容 在存储区域的内容就是变量的值&lt;br&gt;    3，变量的定义 由三部分组成&lt;br&gt;    变量类型修饰符 变量名称 ＝ 初始值；&lt;br&gt;    int studentAge = 22;&lt;br&gt;    4，变量命名要求&lt;br&gt;    只能用字母 数字 下划线 组成 并且数字不能开头&lt;br&gt;    不能使用系统保留字 如int float&lt;br&gt;    不能使用重复的变量名&lt;br&gt;    见面知意 这也是代码规范之一 使用驼峰命名发 单词的第一个字母大写 第一个单词 小写 如 studentName; teacherName;&lt;br&gt;    5，知道了变量  我们也会变量了  接下来就是运算符 第一个赋值运算符‘＝’&lt;br&gt;    赋值运算会把赋值运算符右边的值赋值给左边变量 age ＝ 10；&lt;br&gt;    赋值运算优先级低&lt;br&gt;    //练习&lt;br&gt;    //    int a = 10,b = 20;&lt;br&gt;    //    a = b + a;&lt;br&gt;    //    b = a - b;&lt;br&gt;    //    a = a – b;&lt;br&gt;    6，算数运算符 +，-，&lt;em&gt;，/，%，++，–，&lt;br&gt;    这里一定要注意 ++，– 在前在后的区别 在前先执行 在后后执行&lt;br&gt;    意思：如&lt;br&gt;    int a = 10;&lt;br&gt;    printf(“%d\n”,a++); //输出 10；&lt;br&gt;    int a = 10;&lt;br&gt;    printf(“%d\n”,++a); //输出 11；&lt;br&gt;    7,复合运算符&lt;br&gt;    += ,-=,&lt;/em&gt;=,/=，%= 这些都是谁在前 计算的结果 赋值给谁&lt;br&gt;    如 int b = 0;&lt;br&gt;    b += 2; 想等于 b = b + 2; 所以赋值给b b ＝ 2;&lt;br&gt;&lt;h1&gt;表达式&lt;/h1&gt;&lt;br&gt;    就是常量变量 与运算符组合 表达式都会有返回值 3+5 a+=b&lt;br&gt;&lt;h1&gt;语句&lt;/h1&gt;&lt;br&gt;    程序执行的最小单位 C与OC中 都是以;结尾 如果表达式加上分号就是 一条语句&lt;br&gt;&lt;h1&gt;基本输入 输出函数&lt;/h1&gt;&lt;br&gt;    int i = 0;&lt;br&gt;    scanf(“%d”,&amp;amp;i); //格式化输入函数 %d转换符&lt;br&gt;    printf(“%d”,i); //格式化输出函数 %d转化符&lt;br&gt;    记得掩饰输入输出格式不同会产生什么问题&lt;br&gt;    语法scanf(格式串,变量1地址,变量2地址，……);&lt;br&gt;    如果输入数据类型与格式符匹配则继续读入&lt;br&gt;    否则不在读入立刻反回&lt;br&gt;    scanf(“%d\n”,&amp;amp;i); //切记不可加\n 会抵消人工回车而且不是一次是一直抵消 并且 输入只认大回车 小键盘的回车可能不会结束读入&lt;br&gt;    语法 printf(格式串,表达式1,表达式2，……);&lt;br&gt;    空白符 scanf(“%d “,a) 空白注意将不会输出&lt;br&gt;    输出转换 格式控制&lt;br&gt;    printf(“%05.2f\n”,2.2222); //总共5位 小数点也是一位 不够补0位 不写0 表示不够补空行位&lt;br&gt;    printf(“%-4d\n”,20); //左对其&lt;br&gt;    printf(“%4d\n”,20); //右对其&lt;br&gt;    思考怎么输出%  解决%%&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;center&gt;&lt;br&gt;&lt;br&gt;    &lt;h1&gt;孙悟空三大白骨精！ 感谢各位学习我的博客 C语言一讲已经结束。谢谢大家!&lt;/h1&gt;

&lt;p&gt;&lt;/p&gt;&lt;/center&gt;&lt;p&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1&gt;&lt;center&gt;C语言第一讲《C语言基础》&lt;/center&gt;&lt;/h1&gt;

&lt;h1&gt;&lt;center&gt;进制  程序的一般形式  常量\变量\运算符  表达式  语句  基本输入\输出函数&lt;/center&gt;&lt;/h1&gt;

&lt;h1&gt;进制&lt;/h1&gt;&lt;br&gt;&lt;h1&gt;1, 进制概念 进位
    
    </summary>
    
      <category term="讲义" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/"/>
    
      <category term="C语音" scheme="http://www.tongxiaohao.cn/categories/%E8%AE%B2%E4%B9%89/C%E8%AF%AD%E9%9F%B3/"/>
    
    
      <category term="C语言" scheme="http://www.tongxiaohao.cn/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>hello</title>
    <link href="http://www.tongxiaohao.cn/2016/01/30/hello/"/>
    <id>http://www.tongxiaohao.cn/2016/01/30/hello/</id>
    <published>2016-01-30T03:47:29.000Z</published>
    <updated>2016-09-08T09:34:30.000Z</updated>
    
    <content type="html">&lt;h1&gt;Hello&lt;br&gt;#你们好：&lt;br&gt;&lt;br&gt;这里是我自己查看的写文章对应语法的博客，没有什么实质上的东西测试使用的谢谢大家&lt;br&gt;&lt;br&gt;&lt;h1&gt;&lt;br&gt;    这是标题&lt;br&gt;&lt;/h1&gt;

&lt;p&gt;&lt;u&gt;&lt;br&gt;    下划线&lt;br&gt;&lt;/u&gt;&lt;br&gt;&lt;i&gt;&lt;br&gt;    斜字体&lt;br&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&lt;br&gt;    打火机风格的字体&lt;br&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;    &lt;cite&gt;&lt;br&gt;        引用通常是斜字体&lt;br&gt;    &lt;/cite&gt;&lt;br&gt;    &lt;/p&gt;&lt;p&gt;&lt;br&gt;        &lt;font size=&quot;5&quot; color=&quot;44cef6&quot;&gt;&lt;br&gt;            设置字体大小颜色&lt;br&gt;        &lt;/font&gt;&lt;br&gt;    &lt;/p&gt;&lt;br&gt;    &lt;center&gt;&lt;br&gt;            水平居中&lt;br&gt;    &lt;/center&gt;&lt;br&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;br&gt;        从两边缩进文本创建一个段落dasdsad&lt;br&gt;&lt;/blockquote&gt;


&lt;pre&gt;&lt;code&gt;读书这里面才是可以使用   空格的 
天天快乐
&lt;/code&gt;&lt;/pre&gt;&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1&gt;Hello&lt;br&gt;#你们好：&lt;br&gt;&lt;br&gt;这里是我自己查看的写文章对应语法的博客，没有什么实质上的东西测试使用的谢谢大家&lt;br&gt;&lt;br&gt;&lt;h1&gt;&lt;br&gt;    这是标题&lt;br&gt;&lt;/h1&gt;

&lt;p&gt;&lt;u&gt;&lt;br&gt;    下划线&lt;br&gt;&lt;/u&gt;&lt;br&gt;&lt;i&gt;&lt;br&gt;    
    
    </summary>
    
    
  </entry>
  
</feed>
