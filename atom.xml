<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[童小浩]]></title>
  <subtitle><![CDATA[tongxiaohao]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-04-08T03:07:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[童小浩]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CocoaPods使用步骤已安装Ruby环境]]></title>
    <link href="http://yoursite.com/2016/04/01/CocoaPods%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4%E5%B7%B2%E5%AE%89%E8%A3%85Ruby%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2016/04/01/CocoaPods使用步骤已安装Ruby环境/</id>
    <published>2016-04-01T05:30:34.000Z</published>
    <updated>2016-04-08T03:07:54.000Z</updated>
    <content type="html"><![CDATA[<h1><center>CocoaPods使用步骤已安装Ruby环境</center></h1>

<p>CocoaPods使用步骤(已有Ruby环境):</p><br><p>其实如果你安装了Xcode 就已经有了 Ruby环境</p><br><p>（注：$为提示作用，不要在终端中输入）</p><br><p>1.打开终端,输入</p>

<pre><code>$ gem sources --remove https://rubygems.org/
</code></pre><p>等有反应之后再敲入以下命令</p>

<pre><code>$ gem sources -a https://ruby.taobao.org/
</code></pre><p>为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：</p>

<pre><code>$ gem sources -l
</code></pre><p> 只有在终端中出现下面文字才表明你上面的命令是成功的：</p>

<pre><code>*** CURRENT SOURCES ***

http://ruby.taobao.org/
</code></pre><p>1.5 升级gem命令：</p>

<pre><code>$ sudo gem update --system
</code></pre><p>2.安装CocoaPods,在终端输入</p>

<pre><code>$ sudo gem install cocoapods

$ sudo gem install -n /usr/local/bin cocoapods
</code></pre><p>3.cocoaPod镜像(一般不会用到)</p><br><p>1)$ pod repo remove master</p><br><p>2)$ pod repo add master <a href="https://gitcafe.com/akuandev/Specs.git" target="_blank" rel="external">https://gitcafe.com/akuandev/Specs.git</a></p><br><p>3)$ pod repo update</p>

<p>4.假设我们要在工程中导入AFNetworking类库.</p><br><p>为了确定AFNetworking是否支持CocoaPods,可以用CocoaPods的搜索功能验证一下。在终端中输入:</p>

<pre><code>$ pod search AFNetworking
</code></pre><p>如果显示绿体字类库名,说明CocoaPods支持该类库</p>

<p>5.现在建一个工程,叫CocoaPodsDemo</p>

<p>6.CocoaPods的工作原理是利用Podfile文件来下载我们指定的类库,每个工程只需要一个Podfile文件,但Podfile文件需要我们利用终端自行创建</p>

<p>7.在终端中使用cd命令进入工程所在目录,例如:</p>

<pre><code>$ cd /Users/lanouhn/Desktop/Shared/CocoaPods
</code></pre><p>8.当前目录下,利用vim创建Podfile,在终端中输入:</p>

<pre><code>$ vim Podfile
</code></pre><p>9.按【i】或【a】进入插入模式,输入以下内容:</p>

<pre><code>platform :ios, &apos;7.0&apos;
pod &quot;AFNetworking&quot;, &quot;~&gt; 2.0&quot;
</code></pre><p>(这两行内容是在AFNetworking的github页面找到的。<br>这两句文字的意思是，当前AFNetworking支持的iOS最高版本是iOS 7.0, 要下载的AFNetworking版本是2.0)</p>

<p>输入完毕后,按【ESC】返回命令行模式</p><br><p>按【:】(冒号)进入末行模式,输入【wq】保存命令并退出vim</p>

<p>10.这时你会发现工程目录中，出现一个名为Podfile的文件，而且文件内容就是刚刚输入的内容。<br>(注意,Podfile文件应该和工程文件.xcodeproj在同一个目录下)</p>

<p>此时就可以利用CocoPods下载AFNetworking类库了,还是在终端中的当前工程目录下，运行以下命令:</p>

<pre><code>$ pod install
</code></pre><p>(个人猜测,执行该命令后,CocoPods自动会找到该目录下的Podfile文件,下载文件内容对应的第三方类库)</p><br><p>[ps.最近使用CocoaPods来添加第三方类库，无论是执行pod install还是pod update都卡在了Analyzing dependencies不动</p><br><p>原因在于当执行以上两个命令的时候会升级CocoaPods的spec仓库，加一个参数可以省略这一步，然后速度就会提升不少。加参数的命令如下：</p>

<pre><code>$ pod install --verbose --no-repo-update
$ pod update --verbose --no-repo-update]
</code></pre><p>11.执行完毕后,终端会出现以下信息:</p>

<p>EricmatoMacBook-Pro:CocoaPodsDemo ericwang$ pod install</p><br><p>Analyzing dependencies</p><br><p>Downloading dependencies</p><br><p>Installing AFNetworking (2.0.2)</p><br><p>Generating Pods project</p><br><p>Integrating client project</p>

<p>[!] From now on use <code>CocoaPodsDemo.xcworkspace</code>.</p>

<p>(注意最后一句话，意思是:以后打开工程就用 CocoaPodsDemo.xcworkspace 打开,而不是之前的.xcodeproj文件)</p>

<p>12.此时工程目录会多一个.xcworkspace文件,一个“Podfile.lock”文件和一个文件夹“Pods”</p>

<p>13.点击 .xcworkspace 打开工程,你会发现,AFNetwoking已经成功导入项目了</p><br><p>现在，你就可以开始使用AFNetworking.h了。</p><br><p>可以稍微测试一下，在你的项目任意代码文件中输入(貌似不提示):</p>

<pre><code>#import &lt;AFNetworking.h&gt;
</code></pre><p>或者</p>

<pre><code>#import &quot;AFNetworking.h&quot;
</code></pre><p>然后编译，看看是否出错</p><br><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong><br><br><p>提示我们从现在起，我们需要使用CocoaPodsTest.xcworkspace文件来开发。</p>

<p>对于工程发生的变化，有几点需要说明：</p>

<p>第三方库会被编译成库供我们真正的工程使用</p>

<p></p><p>CocoaPods会将所有的第三方库以target的方式组成一个名为Pods的工程，该工程就放在刚才新生成的Pods目录下。整个第三方库工程会生成一个名称为libPods.a的静态库提供给我们自己的CocoaPodsTest工程使用。</p><p></p>
<p></p><p>我们的工程和第三方库所在的工程会由一个新生成的workspace管理</p><p></p>
<p></p><p>为了方便我们直观的管理工程和第三方库，CocoaPodsTest工程和Pods工程会被以workspace的形式组织和管理，也就是我们刚才看到的CocoaPodsTest.xcworkspace文件。</p><p></p>
<p></p><p>原来的工程设置已经被更改了，这时候我们直接打开原来的工程文件去编译就会报错，只能使用新生成的workspace来进行项目管理。</p><p></p>
<h3><center>孙悟空三大白骨精！ 感谢各位学习我的博客！在此声明此博客并不是我所写下的，是谁写的已经忘记了。我只是引用，感谢原作者！！提供这么详细的使用步骤，谢谢大家</center></h3>

<script>
(function(){
   var src = document.location.protocol +'//js.passport.qihucdn.com/11.0.1.js?8a21f7e7665c20472c1e055e0670ea85';
   document.write('<script src="' + src + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    <summary type="html">
    <![CDATA[<h1><center>CocoaPods使用步骤已安装Ruby环境</center></h1>

<p>CocoaPods使用步骤(已有Ruby环境):</p><br><p>其实如果你安装了Xcode 就已经有了 Ruby环境</p><br><p>（注：$为提示作用，不要在终端]]>
    </summary>
    
      <category term="CocoaPods" scheme="http://yoursite.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基础C语言第二讲]]></title>
    <link href="http://yoursite.com/2016/03/29/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%8C%E8%AE%B2/"/>
    <id>http://yoursite.com/2016/03/29/基础C语言第二讲/</id>
    <published>2016-03-29T15:54:37.000Z</published>
    <updated>2016-04-08T03:08:12.000Z</updated>
    <content type="html"><![CDATA[<p><center><h1>C语言第二讲《C语言基础》</h1></center></p>
<p><center><h3>BOOL  关系运算符  逻辑运算符 逻辑与 &amp;&amp; 逻辑或 || 逻辑 ！非  分支结构\if  enum\枚举\switch</h3></center><br>回顾昨天所学 N进制转换十进制 十进制转换N进制 变量的定义 运算符 赋值运算 格式化输入输出函数 输出转换格式的控制</p>
<h1>BOOL</h1>

<p>C语言中C89 是没有bool类型的(程序员自己用3个宏定义来表示 #define TRUE 1 #define FALSE 0 #define myBOOL int) 到了C99才有的 而OC是支持C99的</p><br><p>bool类型 只有两个值 真，假 在OC中BOOL就是YES ，NO C bool中非零为true真 零为false假OC中1位YES 0为NO 所以bool 值其实和int 一样都是用转义符%d进行输入输;</p>

<h1>关系运算符</h1>

<p>1，    关系运算 &lt;,&gt;,==,&lt;=,&gt;=,!= 其实在程序中==双等号表示值等 就是比较两边的值是否相等 ‘!=’ 是不相等</p><br><p>2，    关系运算的结果只有两个值 真 假 用bool来接收</p>

<h1>逻辑运算符 逻辑与 &amp;&amp; 逻辑或 || 逻辑 ！非</h1>

<p>1，逻辑与 逻辑运算符 &amp;&amp; </p><br><p>主要 关系运算表达式1 &amp;&amp; 关系运算表达式2 运算符两边 都为真的时候才位真 其他假 但是有个短路现象 <u>需要重点强调 当左边值为假的时候不会再去运算表示式2 直接会返回假 C语言中的代码优化</u>如下图</p><br><p><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%26%26%E7%9F%AD%E8%B7%AF%E7%8E%B0%E8%B1%A1.png" width="400" height="180" alt="图片"></p><br><p>2，逻辑或 ||</p><br><p>逻辑或 逻辑运算符 || 主要 关系运算表达式1 || 关系运算表达式2 运算符两边 都为假的时候才位假 其他真 但是有个短路现象 <u>需要重点强调 当左边值为真的时候不会再去运算表示式2 直接会返回真 C语言中的代码优化 例子请参照上图自己写一下</u></p><br><p>3，逻辑 ！非</p><br><p>就是取反运算 只对真假取反 ！YES ==NO</p><br><p>4，运算符的优先级</p><br><p>！&gt;算数运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符</p><p><br><br></p><h1>分支结构</h1><br><br><p>程序的主要三种结构 顺序结构 分支结构 循环结构</p><br><p>当你去跑步运动时候 一条马路跑下去就是 顺序 第一天学的就是 当遇到了一个十字路口 就是分支结构 今天要讲的就是分支结构 当你在学校跑道上跑圈的时候 就是循环结构 以后要讲</p><br><p>再次强调分支 什么是分支 比如你在巷子里吃饭 很多小餐馆 你选择一个 就是一个分支 那个巷子里就有很多的分支（餐馆）</p>

<p></p><h1>if 如果</h1><p></p>

<pre><code>1 ， //如果 表达式a &gt; b为真 才会执行 大括号里边的 代码否则不执行
int a = 10, b = 20;
if (a &gt; b) {
        printf(&quot;a &gt; b&quot;);
}
2，//如果 表达式a &gt; b为真 才会执行 大括号里边的 代码否则执行 else 所对应的大括号里的代码
if(a &gt; b){
        printf(&quot;a &gt; b&quot;);
}else{
        printf(&quot;a &lt; b&quot;);
}
return 0;
3，int a = 10, b = 20, c = 15;
if (a &gt; b &amp;&amp; a &gt; c) { //if 判断不成立 判断 第一个 else if 不成立 就下一个 else if 直到一个成立的 都不成立 才运行 else
           printf(&quot;a最大&quot;);
}else if (b &gt; a &amp;&amp; b &gt; c){
        printf(&quot;b最大&quot;);
}else if (c &gt; a &amp;&amp; c &gt; b){
        printf(&quot;c最大&quot;);
}else{
        printf(&quot;最少有两个相同的大小&quot;);
}
//如果 ?号前边 为真 就给前一个赋值 冒号前边的 为假就是冒号后边的
int c = a &gt; b ? a : b;  介绍一个比较的简单写法 也是个条件运算符
</code></pre><p></p><h1>enum 枚举 与 switch</h1><p></p>

<pre><code>enum{
        one = 1, //如果第一个不赋值 就默认为0
        tow,     //2 以下依次加1
        three,
        four,
        five
};
//目的：提高代码可读性 讲人能看懂的标识符与计算机能识别的数字建立关系
//enum写在main函数上面 如下图
</code></pre><p><img src="http://7xqlyv.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%BA%8C%E8%8A%82%E5%9B%BE%E7%89%87.png" width="240" height="120" alt="图片">    </p><br><p></p><h3>switch case</h3><p></p>

<pre><code>int a = 0;
scanf(&quot;%d&quot;,&amp;a);
/*开关*/switch (a) { //只能放整形 只能整形 变量
/*
如果a 为2 则会运行 case tow 下面的{}里的程序
如果a 为3 则会运行 case three 下面的{}里的程序
如果a 不是1，2，3 则会运行 default 下面的{}里的程序
*/
/*情况*/ case one:{ 
        printf(&quot;a = 1&quot;);
/*情况结束标识*/break;
    }
    case tow:{
        printf(&quot;a = 2&quot;);
//break很重要不能忽视否则代码会一直向下运行 case three 直到有break
        break;
    }
    case three:{
        printf(&quot;a = 3&quot;);
        break;
    }
    default: {//可以去掉
        printf(&quot;a不是1，2，3&quot;);
        break;
    }
}
</code></pre><p><center><h2>孙悟空三大白骨精！ 感谢各位学习我的博客 C语言二讲已经结束。谢谢大家!</h2></center></p>


<script>
(function(){
   var src = document.location.protocol +'//js.passport.qihucdn.com/11.0.1.js?8a21f7e7665c20472c1e055e0670ea85';
   document.write('<script src="' + src + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    <summary type="html">
    <![CDATA[<p><center><h1>C语言第二讲《C语言基础》</h1></center></p>
<p><center><h3>BOOL  关系运算符  逻辑运算符 逻辑与 &amp;&amp; 逻辑或 || 逻辑 ！非  分支结构\if  enum\枚举\switch</h3></]]>
    </summary>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基础C语言第一讲]]></title>
    <link href="http://yoursite.com/2016/03/25/%E5%9F%BA%E7%A1%80C%E8%AF%AD%E8%A8%80%E7%AC%AC%E4%B8%80%E8%AE%B2/"/>
    <id>http://yoursite.com/2016/03/25/基础C语言第一讲/</id>
    <published>2016-03-25T00:55:46.000Z</published>
    <updated>2016-04-08T03:08:04.000Z</updated>
    <content type="html"><![CDATA[<h1><center>C语言第一讲《C语言基础》</center></h1>

<h3><center>进制  程序的一般形式  常量\变量\运算符  表达式  语句  基本输入\输出函数</center></h3>

<p></p><h1>进制</h1><p></p>
<h2>1, 进制概念 进位机制 逢多少进1</h2><br>十进制 用0～9表示 就是逢10进1 进1就是表示多了一位 “10”<br><br>生活中的例子 六十进制 钟表 逢60进1 12进制 年 逢12进1 24进制 天 每一天24小时逢24进1<br><center><img src="http://7xqlyv.com1.z0.glb.clouddn.com/bbb%20%E4%B8%8B%E5%8D%882.33.40.jpeg" width="100" height="100" alt="图片"><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E5%8D%81%E8%BF%9B%E5%88%B6%20%E4%B8%8B%E5%8D%882.33.40.jpg" width="130" height="100" alt="图片"></center><br><br><h2>2,计算机的进制</h2><br>计算机使用的是二进制 逢2进1 所以位数只有0，1 例子 0，1，10，11，100<br><br>因为目前的计算机电脑内部 只识别 是对的 还是 错的 所以 它表示的 就是1和0<br><br><h2>3,进制规则</h2><br>N进制 在表示所有位中 显示的 只有 0～N-1 遇到N前一位加1<br><br>N进制 就是逢N进1<br><br><h2>4,进制转换</h2><br>基数 是几进制 基数就是几<br><br>位  从右到左 就是从低位到高位 位是按照0开始数 最右边就是0；<br><br>权  和基数一样 是几进制 权就是几<br><br>位权  就是每一个位置 对应的单位值 N^(I - 1)<br><br>（1）十进制转N进制<br>    连除倒取余<br><center><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6%20%E4%B8%8B%E5%8D%882.33.40.jpg" width="250" height="300" alt="图片"></center><br><center>例子1：转二进制   例子2：转十六进制</center><br>（2） N进制转十进制<br>    按位求和<br><center><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B61%20%E4%B8%8B%E5%8D%882.33.40.jpg" width="250" height="100" alt="图片"><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B62%20%E4%B8%8B%E5%8D%882.33.40.jpg" width="250" height="100" alt="图片"></center><br><center>例子：二进制转十进制</center><br><br><h2>5,进制数表示</h2><br>十进制：不加以修饰 100<br><br>八进制：在数值前加0  表示 0573<br><br>二进制：在数值前加0b 表示 0b1101<br><br>十六进制：在数值前加0X 表示0X2A<br><br><h2>6,进制了解</h2><br>十进制：就是开发人员使用 （人）<br><br>二进制：计算机识别的语言 0，1编码<br><br>十六进制：因为一个十六进制数可以表示4位二进制 所以十六进制更多是为了方便表示二进制 十六进制的0～F 二进制的0000～1111<br><br>    以上图片资源均来自百度。<br><br><h1>程序的一般形式</h1><br><h2>1,创建程序</h2><br>1),选择OS X 下面的Application 选择Command Line Tool （控制台模式）点下面的Next<br><center>如下图</center><br><img src="http://7xqlyv.com1.z0.glb.clouddn.com/chuangjianchengxu1%20%E4%B8%8B%E5%8D%882.33.40.png" width="682" height="392" alt="图片"><br>2),填写项目名称 和 开发组织机构名称 组织机构ID 选择语言 Objective -C (OC)点击Next 选择在桌面创建<br><center>如下图</center><br><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E5%88%9B%E5%BB%BA%E7%A8%8B%E5%BA%8F2%20%E4%B8%8B%E5%8D%882.33.40.png" width="682" height="392" alt="图片"><br><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E9%80%89%E6%8B%A9%E6%A1%8C%E9%9D%A2.png" width="682" height="392" alt="图片"><br><br><h2>2,程序基本介绍</h2><br><h3>1).注释</h3><br><br>单行注释，多行注视<br><br>作用：提供思路，提示代码作用，程序并不执行 不注释你会忘记的会发现以前写的代码不知道是干什么的了<br>单行注视不可以换行 只是注释 //  后边到这一行的末尾 敲到回车时候就不是注释了<br>多行注释：/<em> 可以在这个之间 可以换行</em>/<br><center><br><img src="http://7xqlyv.com1.z0.glb.clouddn.com/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A.png" width="682" height="392" alt="图片"><br></center><br><br><h3>2).main 程序执行入口 又称主函数</h3><br>    如上图 这里我们介绍一个输出语句 printf(“你好！”); 这个就是在控制台输出<br><br><h3>3).#import 与#include</h3><br><br>//#import 与#include 引入文件与类库 如果要在本文件中使用其他文件 就必须引入其他文件 格式两种 &lt;&gt; , “” .&lt;&gt;使用系统类库文件 “” 使用创建文件<br><br><h2>3,数据类型</h2><br><h3>1).数据类型的分类</h3><br>    1).基本数据类型 ：字符类型char 1字节 整型 int 4字节 短整型 short 2字节 长整型 long 4    字节 或8字节 单精度浮点型 float 4字节 双精度浮点型 double 8字节<br>    2).构造类型 ：数组 枚举<br>    3).    指针类型；<br>    4).空类型 void<br><h3>2).数据类型的单位</h3><br>    数据类型的单位 字节byte比特 最常用的是位 bits 位是最小的存储单位 1字节 == 8位（二进制位）== 2位十六进制位<br><h3>数据类型的存储</h3><br>    不同的数据类型，存储的空间不同 空间决定了数据类型的存储数据的范围<br>    1).数据类型的存储空间与操作系统有关并不是统一的 但是有个原则: short&lt;=int&lt;=long&lt;=longlong<br>    2).sizeof()运算符，计算一个数据类型占用的空间 一定要记得是运算符而不是函数<br>    3).存储空间决定了存储数据的范围,不用背只需记得最长用到的 益处：超出了数据类型的取值范围<br>    常用的数据类型字节数请看分类里的介绍<br>    4).在整型中还有一个叫无符号标识符 unsigned 而整型区 分为来种有符合与无符号有符号的区分正负 整数对应的二进制数 最高位为1 为正整数 最高位为0 为负整数<br><h1>常量\变量\运算符</h1><br>    1，常量 程序运行期间不允许改变的量 如10 ，2.5，A，转义字符不可直接打印\n 字符串常量 “你好”<br>    2，知道常量了 那变量的定义就是…… 程序运行可以改变的量变量代表存储区域 用于储存内容 在存储区域的内容就是变量的值<br>    3，变量的定义 由三部分组成<br>    变量类型修饰符 变量名称 ＝ 初始值；<br>    int studentAge = 22;<br>    4，变量命名要求<br>    只能用字母 数字 下划线 组成 并且数字不能开头<br>    不能使用系统保留字 如int float<br>    不能使用重复的变量名<br>    见面知意 这也是代码规范之一 使用驼峰命名发 单词的第一个字母大写 第一个单词 小写 如 studentName; teacherName;<br>    5，知道了变量  我们也会变量了  接下来就是运算符 第一个赋值运算符‘＝’<br>    赋值运算会把赋值运算符右边的值赋值给左边变量 age ＝ 10；<br>    赋值运算优先级低<br>    //练习<br>    //    int a = 10,b = 20;<br>    //    a = b + a;<br>    //    b = a - b;<br>    //    a = a – b;<br>    6，算数运算符 +，-，<em>，/，%，++，–，<br>    这里一定要注意 ++，– 在前在后的区别 在前先执行 在后后执行<br>    意思：如<br>    int a = 10;<br>    printf(“%d\n”,a++); //输出 10；<br>    int a = 10;<br>    printf(“%d\n”,++a); //输出 11；<br>    7,复合运算符<br>    += ,-=,</em>=,/=，%= 这些都是谁在前 计算的结果 赋值给谁<br>    如 int b = 0;<br>    b += 2; 想等于 b = b + 2; 所以赋值给b b ＝ 2;<br><h1>表达式</h1><br>    就是常量变量 与运算符组合 表达式都会有返回值 3+5 a+=b<br><h1>语句</h1><br>    程序执行的最小单位 C与OC中 都是以;结尾 如果表达式加上分号就是 一条语句<br><h1>基本输入 输出函数</h1><br>    int i = 0;<br>    scanf(“%d”,&amp;i); //格式化输入函数 %d转换符<br>    printf(“%d”,i); //格式化输出函数 %d转化符<br>    记得掩饰输入输出格式不同会产生什么问题<br>    语法scanf(格式串,变量1地址,变量2地址，……);<br>    如果输入数据类型与格式符匹配则继续读入<br>    否则不在读入立刻反回<br>    scanf(“%d\n”,&amp;i); //切记不可加\n 会抵消人工回车而且不是一次是一直抵消 并且 输入只认大回车 小键盘的回车可能不会结束读入<br>    语法 printf(格式串,表达式1,表达式2，……);<br>    空白符 scanf(“%d “,a) 空白注意将不会输出<br>    输出转换 格式控制<br>    printf(“%05.2f\n”,2.2222); //总共5位 小数点也是一位 不够补0位 不写0 表示不够补空行位<br>    printf(“%-4d\n”,20); //左对其<br>    printf(“%4d\n”,20); //右对其<br>    思考怎么输出%  解决%%<br><br><br><center><br><br>    <h2>孙悟空三大白骨精！ 感谢各位学习我的博客 C语言一讲已经结束。谢谢大家!</h2>

<p></p></center><p></p>
<script>
(function(){
   var src = document.location.protocol +'//js.passport.qihucdn.com/11.0.1.js?8a21f7e7665c20472c1e055e0670ea85';
   document.write('<script src="' + src + '" id="sozz"><\/script>');
})();
</script>
]]></content>
    <summary type="html">
    <![CDATA[<h1><center>C语言第一讲《C语言基础》</center></h1>

<h3><center>进制  程序的一般形式  常量\变量\运算符  表达式  语句  基本输入\输出函数</center></h3>

<p></p><h1>进制</h1><p></p>
<h2]]>
    </summary>
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hello]]></title>
    <link href="http://yoursite.com/2016/01/30/hello/"/>
    <id>http://yoursite.com/2016/01/30/hello/</id>
    <published>2016-01-30T03:47:29.000Z</published>
    <updated>2016-04-05T07:24:19.000Z</updated>
    <content type="html"><![CDATA[<h1>Hello<br>#你们好：<br><br>这里是我自己查看的写文章对应语法的博客，没有什么实质上的东西测试使用的谢谢大家<br><br><h1><br>    这是标题<br></h1>

<p><u><br>    下划线<br></u><br><i><br>    斜字体<br></i></p>
<p><tt><br>    打火机风格的字体<br></tt></p>
<p></p><p><br>    <cite><br>        引用通常是斜字体<br>    </cite><br>    </p><p><br>        <font size="5" color="44cef6"><br>            设置字体大小颜色<br>        </font><br>    </p><br>    <center><br>            水平居中<br>    </center><br><p></p><p></p>
<blockquote><br>        从两边缩进文本创建一个段落<br></blockquote>


<pre><code>读书这里面才是可以使用   空格的 
天天快乐
</code></pre></h1>]]></content>
    <summary type="html">
    <![CDATA[<h1>Hello<br>#你们好：<br><br>这里是我自己查看的写文章对应语法的博客，没有什么实质上的东西测试使用的谢谢大家<br><br><h1><br>    这是标题<br></h1>

<p><u><br>    下划线<br></u><br><i><br>    ]]>
    </summary>
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
